import discord
from discord import app_commands
from discord.ext import commands, tasks
import os
from datetime import datetime, timedelta
import asyncio
from collections import defaultdict
import json
import random
import aiohttp
from typing import Optional, List, Union
import pytz

intents = discord.Intents.default()
intents.members = True
intents.guilds = True
intents.message_content = True
intents.voice_states = True
intents.invites = True

bot = commands.Bot(command_prefix="!", intents=intents)

# –°–∏—Å—Ç–µ–º–∏ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
voice_time_tracker = {}
tracked_channels = {}
warning_sent = set()
voice_activity = defaultdict(timedelta)
last_activity_update = datetime.utcnow()
banned_users = {}  # {guild_id: {user_id: {"unlock_time": datetime, "reason": str}}}

# –°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π –∑–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è–º–∏
invite_roles = {}
invite_cache = {}

# –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
welcome_messages = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
WG_API_KEY = os.getenv('WG_API_KEY')
WG_API_URL = "https://api.worldoftanks.eu/wot/"

def load_invite_data():
    try:
        with open('invite_roles.json', 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_invite_data():
    with open('invite_roles.json', 'w') as f:
        json.dump(invite_roles, f, indent=4)

def load_welcome_data():
    try:
        with open('welcome_messages.json', 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_welcome_data():
    with open('welcome_messages.json', 'w') as f:
        json.dump(welcome_messages, f, indent=4)

def load_banned_users():
    try:
        with open('banned_users.json', 'r') as f:
            data = json.load(f)
            for guild_id, users in data.items():
                banned_users[int(guild_id)] = {}
                for user_id, ban_data in users.items():
                    banned_users[int(guild_id)][int(user_id)] = {
                        "unlock_time": datetime.fromisoformat(ban_data["unlock_time"]),
                        "reason": ban_data["reason"]
                    }
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_banned_users():
    data = {}
    for guild_id, users in banned_users.items():
        data[str(guild_id)] = {}
        for user_id, ban_data in users.items():
            data[str(guild_id)][str(user_id)] = {
                "unlock_time": ban_data["unlock_time"].isoformat(),
                "reason": ban_data["reason"]
            }
    with open('banned_users.json', 'w') as f:
        json.dump(data, f, indent=4)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
invite_roles = load_invite_data()
welcome_messages = load_welcome_data()
load_banned_users()

async def get_wg_api_data(endpoint: str, params: dict) -> Optional[dict]:
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ Wargaming API"""
    params['application_id'] = WG_API_KEY
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(f"{WG_API_URL}{endpoint}", params=params) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    return data.get('data') if 'data' in data else data
                print(f"–ü–æ–º–∏–ª–∫–∞ API: {resp.status} - {await resp.text()}")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ API: {e}")
    return None

async def update_invite_cache(guild):
    """–û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à –∑–∞–ø—Ä–æ—à–µ–Ω—å –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        invites = await guild.invites()
        invite_cache[guild.id] = {invite.code: invite.uses for invite in invites}
    except discord.Forbidden:
        print(f"–ù–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É –Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥ –∑–∞–ø—Ä–æ—à–µ–Ω—å –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {guild.name}")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É –∑–∞–ø—Ä–æ—à–µ–Ω—å: {e}")

async def delete_after(message, minutes):
    """–í–∏–¥–∞–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –≤–∫–∞–∑–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–≤–∏–ª–∏–Ω"""
    if minutes <= 0: 
        return
    await asyncio.sleep(minutes * 60)
    try: 
        await message.delete()
    except: 
        pass

async def create_ban_embed(member: discord.Member, duration: str, reason: str, unlock_time: datetime) -> discord.Embed:
    """–°—Ç–≤–æ—Ä—é—î embed –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è"""
    kyiv_tz = pytz.timezone('Europe/Kiev')
    current_time = datetime.now(kyiv_tz)
    time_left = unlock_time - current_time
    
    embed = discord.Embed(
        title="‚õî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ",
        color=discord.Color.red(),
        timestamp=current_time
    )
    
    embed.set_thumbnail(url=member.display_avatar.url)
    
    embed.add_field(
        name="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á",
        value=f"{member.mention}\n{member.display_name}",
        inline=True
    )
    
    embed.add_field(
        name="–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å",
        value=duration,
        inline=True
    )
    
    embed.add_field(
        name="–ü—Ä–∏—á–∏–Ω–∞",
        value=reason or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ",
        inline=False
    )
    
    embed.add_field(
        name="–†–æ–∑–±–ª–æ–∫—É—î—Ç—å—Å—è –æ",
        value=f"<t:{int(unlock_time.timestamp())}:R>",
        inline=False
    )
    
    embed.set_footer(
        text=f"–ß–∞—Å –¥–æ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è: {str(time_left).split('.')[0]}"
    )
    
    return embed

async def check_time_locks():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∞—Å –±–ª–æ–∫—É–≤–∞–Ω—å —ñ –∑–Ω—ñ–º–∞—î —ó—Ö –ø—Ä–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—ñ"""
    while True:
        await asyncio.sleep(60)
        current_time = datetime.utcnow()
        
        for guild_id, users in list(banned_users.items()):
            guild = bot.get_guild(guild_id)
            if not guild:
                continue
                
            for user_id, ban_data in list(users.items()):
                if current_time >= ban_data["unlock_time"]:
                    member = guild.get_member(user_id)
                    if member:
                        try:
                            mute_role = discord.utils.get(guild.roles, name="Muted")
                            if mute_role and mute_role in member.roles:
                                await member.remove_roles(mute_role)
                            
                            banned_users[guild_id].pop(user_id)
                            save_banned_users()
                            
                            try:
                                await member.send(f"üîì –í–∞—à –æ–±–º–µ–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ {guild.name} –±—É–ª–æ –∑–Ω—è—Ç–æ.")
                            except:
                                pass
                                
                        except discord.Forbidden:
                            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω—è—Ç–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è {member.display_name} –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ {guild.name}")
                    else:
                        banned_users[guild_id].pop(user_id)
                        save_banned_users()

@tasks.loop(minutes=1)
async def update_voice_activity():
    global last_activity_update
    now = datetime.utcnow()
    time_elapsed = now - last_activity_update
    last_activity_update = now
    
    for guild in bot.guilds:
        for voice_channel in guild.voice_channels:
            for member in voice_channel.members:
                if not member.bot:
                    voice_activity[member.id] += time_elapsed

@tasks.loop(minutes=1)
async def check_voice_activity():
    current_time = datetime.utcnow()
    for guild_id, data in tracked_channels.items():
        guild = bot.get_guild(guild_id)
        if not guild: 
            continue
            
        voice_channel = guild.get_channel(data["voice_channel"])
        log_channel = guild.get_channel(data["log_channel"])
        if not voice_channel or not log_channel: 
            continue
            
        for member in voice_channel.members:
            if member.bot: 
                continue
                
            member_key = f"{guild_id}_{member.id}"
            
            if member_key not in voice_time_tracker:
                voice_time_tracker[member_key] = current_time
                warning_sent.discard(member_key)
                continue
                
            time_in_channel = current_time - voice_time_tracker[member_key]
            
            if time_in_channel > timedelta(minutes=10) and member_key not in warning_sent:
                try:
                    await member.send("‚ö†Ô∏è –í–∏ –≤ –∫–∞–Ω–∞–ª—ñ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤–∂–µ 10+ —Ö–≤–∏–ª–∏–Ω. ‚úÖ –ë—É–¥—å—Ç–µ –∞–∫—Ç–∏–≤–Ω—ñ, –∞–±–æ –í–∏ –±—É–¥–µ—Ç–µ –≤—ñ–¥—î–¥–Ω–∞–Ω—ñ!")
                    warning_sent.add(member_key)
                except: 
                    pass
            
            if time_in_channel > timedelta(minutes=15):
                try:
                    await member.move_to(None)
                    msg = await log_channel.send(f"üî¥ {member.mention} –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ")
                    bot.loop.create_task(delete_after(msg, data["delete_after"]))
                    del voice_time_tracker[member_key]
                    warning_sent.discard(member_key)
                except: 
                    pass

@bot.event
async def on_voice_state_update(member, before, after):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π
    if member.id in banned_users.get(member.guild.id, {}):
        if after.channel and not before.channel:
            await member.move_to(None)
            try:
                await member.send("‚õî –í–∞–º –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –ø—Ä–∏—î–¥–Ω—É–≤–∞—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤ –ø—ñ–¥ —á–∞—Å –±–ª–æ–∫—É–≤–∞–Ω–Ω—è")
            except:
                pass
            return
    
    if before.channel and before.channel.id in [data["voice_channel"] for data in tracked_channels.values()]:
        member_key = f"{member.guild.id}_{member.id}"
        if member_key in voice_time_tracker:
            del voice_time_tracker[member_key]
            warning_sent.discard(member_key)

@bot.event
async def on_message(message):
    if message.author.bot:
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π
    if message.author.id in banned_users.get(message.guild.id, {}):
        await message.delete()
        try:
            await message.author.send("‚õî –í–∞–º –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –±–ª–æ–∫—É–≤–∞–Ω–Ω—è")
        except:
            pass
        return
    
    await bot.process_commands(message)

@bot.event
async def on_member_join(member):
    if member.bot:
        return
    
    guild = member.guild
    assigned_role = None
    
    try:
        current_invites = await guild.invites()
        used_invite = None
        for invite in current_invites:
            cached_uses = invite_cache.get(guild.id, {}).get(invite.code, 0)
            if invite.uses > cached_uses:
                used_invite = invite
                break
        
        if used_invite:
            await update_invite_cache(guild)
            guild_roles = invite_roles.get(str(guild.id), {})
            role_id = guild_roles.get(used_invite.code)
            
            if role_id:
                role = guild.get_role(role_id)
                if role:
                    try:
                        await member.add_roles(role)
                        assigned_role = role
                        print(f"–ù–∞–¥–∞–Ω–æ —Ä–æ–ª—å {role.name} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {member} –∑–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è {used_invite.code}")
                    except discord.Forbidden:
                        print(f"–ù–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É –Ω–∞–¥–∞–≤–∞—Ç–∏ —Ä–æ–ª—å {role.name}")
                    except Exception as e:
                        print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥–∞–Ω–Ω—è —Ä–æ–ª—ñ: {e}")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞: {e}")
    
    # –û–±—Ä–æ–±–∫–∞ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if str(guild.id) in welcome_messages:
        channel_id = welcome_messages[str(guild.id)]["channel_id"]
        channel = guild.get_channel(channel_id)
        if channel:
            try:
                inviter = "–ù–µ–≤—ñ–¥–æ–º–æ"
                if used_invite and used_invite.inviter:
                    inviter = used_invite.inviter.mention
                
                role_info = "–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ"
                if assigned_role:
                    role_info = assigned_role.mention
                
                kyiv_time = datetime.now(pytz.timezone('Europe/Kiev'))
                embed = discord.Embed(
                    title=f"–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, {member.display_name}!",
                    color=discord.Color.green(),
                    timestamp=kyiv_time
                )
                
                embed.set_thumbnail(url=member.display_avatar.url)
                
                embed.add_field(
                    name="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á",
                    value=f"{member.mention}\n{member.display_name}",
                    inline=True
                )
                
                embed.add_field(
                    name="–ó–∞–ø—Ä–æ—Å–∏–≤",
                    value=inviter,
                    inline=True
                )
                
                embed.add_field(
                    name="–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å",
                    value=role_info,
                    inline=False
                )
                
                embed.add_field(
                    name="–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤ Discord",
                    value=member.created_at.strftime("%d.%m.%Y"),
                    inline=False
                )
                
                embed.set_footer(
                    text=f"{guild.name} | –ü—Ä–∏—î–¥–Ω–∞–≤—Å—è: {kyiv_time.strftime('%d.%m.%Y –æ %H:%M')}",
                    icon_url=guild.icon.url if guild.icon else None
                )
                
                await channel.send(embed=embed)
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è: {e}")

@bot.event
async def on_invite_create(invite):
    await update_invite_cache(invite.guild)

@bot.event
async def on_invite_delete(invite):
    await update_invite_cache(invite.guild)

@bot.event
async def on_ready():
    print(f'–ë–æ—Ç {bot.user} –æ–Ω–ª–∞–π–Ω!')
    
    kyiv_tz = pytz.timezone('Europe/Kiev')
    now = datetime.now(kyiv_tz)
    print(f"–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å (–ö–∏—ó–≤): {now}")
    
    for guild in bot.guilds:
        await update_invite_cache(guild)
    
    try:
        synced = await bot.tree.sync()
        print(f"–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: {e}")
    
    check_voice_activity.start()
    update_voice_activity.start()
    bot.loop.create_task(check_time_locks())

# ========== –ù–û–í–Ü –ö–û–ú–ê–ù–î–ò ==========

@bot.tree.command(name="time_lock", description="–¢–∏–º—á–∞—Å–æ–≤–æ –±–ª–æ–∫—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
@app_commands.describe(
    user="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è",
    duration="–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –±–ª–æ–∫—É–≤–∞–Ω–Ω—è (–Ω–∞–ø—Ä. 30m, 2h, 1d)",
    reason="–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è",
    channel="–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)"
)
async def time_lock(
    interaction: discord.Interaction,
    user: discord.Member,
    duration: str,
    reason: Optional[str] = None,
    channel: Optional[discord.TextChannel] = None
):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", ephemeral=True)
    
    if user.bot:
        return await interaction.response.send_message("‚ùå –ù–µ –º–æ–∂–Ω–∞ –±–ª–æ–∫—É–≤–∞—Ç–∏ –±–æ—Ç—ñ–≤", ephemeral=True)
    
    if user.guild_permissions.administrator:
        return await interaction.response.send_message("‚ùå –ù–µ –º–æ–∂–Ω–∞ –±–ª–æ–∫—É–≤–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤", ephemeral=True)
    
    try:
        time_amount = int(duration[:-1])
        time_unit = duration[-1].lower()
        
        if time_unit == 'm':
            delta = timedelta(minutes=time_amount)
        elif time_unit == 'h':
            delta = timedelta(hours=time_amount)
        elif time_unit == 'd':
            delta = timedelta(days=time_amount)
        else:
            return await interaction.response.send_message(
                "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ m (—Ö–≤–∏–ª–∏–Ω–∏), h (–≥–æ–¥–∏–Ω–∏) –∞–±–æ d (–¥–Ω—ñ)",
                ephemeral=True
            )
    except (ValueError, IndexError):
        return await interaction.response.send_message(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –ü—Ä–∏–∫–ª–∞–¥: 30m, 2h, 1d",
            ephemeral=True
        )
    
    unlock_time = datetime.utcnow() + delta
    
    if interaction.guild.id not in banned_users:
        banned_users[interaction.guild.id] = {}
    
    banned_users[interaction.guild.id][user.id] = {
        "unlock_time": unlock_time,
        "reason": reason or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    }
    save_banned_users()
    
    mute_role = discord.utils.get(interaction.guild.roles, name="Muted")
    if not mute_role:
        try:
            mute_role = await interaction.guild.create_role(name="Muted", color=discord.Color.dark_grey())
            
            for channel in interaction.guild.channels:
                try:
                    await channel.set_permissions(
                        mute_role,
                        send_messages=False,
                        speak=False,
                        add_reactions=False
                    )
                except:
                    continue
        except discord.Forbidden:
            return await interaction.response.send_message(
                "‚ùå –ë–æ—Ç –Ω–µ –º–∞—î –¥–æ–∑–≤–æ–ª—ñ–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–ª—ñ Muted",
                ephemeral=True
            )
    
    try:
        await user.add_roles(mute_role)
    except discord.Forbidden:
        return await interaction.response.send_message(
            "‚ùå –ë–æ—Ç –Ω–µ –º–∞—î –¥–æ–∑–≤–æ–ª—ñ–≤ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–æ–ª–µ–π",
            ephemeral=True
        )
    
    duration_text = ""
    if time_unit == 'm':
        duration_text = f"{time_amount} —Ö–≤–∏–ª–∏–Ω"
    elif time_unit == 'h':
        duration_text = f"{time_amount} –≥–æ–¥–∏–Ω"
    elif time_unit == 'd':
        duration_text = f"{time_amount} –¥–Ω—ñ–≤"
    
    embed = await create_ban_embed(user, duration_text, reason, unlock_time)
    
    target_channel = channel or interaction.channel
    try:
        await target_channel.send(embed=embed)
        await interaction.response.send_message(
            f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.mention} —É—Å–ø—ñ—à–Ω–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ",
            ephemeral=True
        )
        
        try:
            await user.send(embed=embed)
        except:
            pass
    except discord.Forbidden:
        await interaction.response.send_message(
            "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è",
            ephemeral=True
        )

@bot.tree.command(name="add_role", description="–î–æ–¥–∞—î —Ä–æ–ª—å –æ–¥–Ω–æ–º—É –∞–±–æ –¥–µ–∫—ñ–ª—å–∫–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º")
@app_commands.describe(
    users="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª –∞–±–æ @)",
    role="–†–æ–ª—å –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è",
    reason="–ü—Ä–∏—á–∏–Ω–∞ (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)",
    channel="–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)"
)
async def add_role(
    interaction: discord.Interaction,
    users: str,
    role: discord.Role,
    reason: Optional[str] = None,
    channel: Optional[discord.TextChannel] = None
):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", ephemeral=True)
    
    await interaction.response.defer(ephemeral=True)
    
    try:
        user_ids = [int(id.strip()) for id in users.split() if id.strip().isdigit()]
        members = []
        for user_id in user_ids:
            member = interaction.guild.get_member(user_id)
            if member:
                members.append(member)
        
        if not members:
            members = []
            for mention in users.split():
                if mention.startswith('<@') and mention.endswith('>'):
                    user_id = mention[2:-1]
                    if user_id.startswith('!'):
                        user_id = user_id[1:]
                    if user_id.isdigit():
                        member = interaction.guild.get_member(int(user_id))
                        if member:
                            members.append(member)
    except Exception as e:
        return await interaction.followup.send(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {str(e)}",
            ephemeral=True
        )
    
    if not members:
        return await interaction.followup.send(
            "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –≤–∞–ª—ñ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
            ephemeral=True
        )
    
    success_count = 0
    failed_members = []
    
    for member in members:
        try:
            await member.add_roles(role)
            success_count += 1
        except:
            failed_members.append(member.display_name)
    
    kyiv_tz = pytz.timezone('Europe/Kiev')
    current_time = datetime.now(kyiv_tz)
    
    embed = discord.Embed(
        title=f"üîπ –†–æ–ª—å {role.name} –¥–æ–¥–∞–Ω–∞",
        color=role.color,
        timestamp=current_time
    )
    
    embed.add_field(
        name="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
        value=str(success_count),
        inline=True
    )
    
    if reason:
        embed.add_field(
            name="–ü—Ä–∏—á–∏–Ω–∞",
            value=reason,
            inline=True
        )
    
    if failed_members:
        embed.add_field(
            name="–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ä–æ–ª—å",
            value=", ".join(failed_members),
            inline=False
        )
    
    embed.set_footer(
        text=f"–í–∏–∫–æ–Ω–∞–≤: {interaction.user.display_name}",
        icon_url=interaction.user.display_avatar.url
    )
    
    target_channel = channel or interaction.channel
    try:
        await target_channel.send(embed=embed)
        await interaction.followup.send(
            f"‚úÖ –†–æ–ª—å {role.mention} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ {success_count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º",
            ephemeral=True
        )
    except discord.Forbidden:
        await interaction.followup.send(
            "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–æ–ª—ñ",
            ephemeral=True
        )

@bot.tree.command(name="rem_role", description="–í–∏–¥–∞–ª—è—î —Ä–æ–ª—å —É –æ–¥–Ω–æ–≥–æ –∞–±–æ –¥–µ–∫—ñ–ª—å–∫–æ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
@app_commands.describe(
    users="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª –∞–±–æ @)",
    role="–†–æ–ª—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è",
    reason="–ü—Ä–∏—á–∏–Ω–∞ (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)",
    channel="–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)"
)
async def rem_role(
    interaction: discord.Interaction,
    users: str,
    role: discord.Role,
    reason: Optional[str] = None,
    channel: Optional[discord.TextChannel] = None
):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", ephemeral=True)
    
    await interaction.response.defer(ephemeral=True)
    
    try:
        user_ids = [int(id.strip()) for id in users.split() if id.strip().isdigit()]
        members = []
        for user_id in user_ids:
            member = interaction.guild.get_member(user_id)
            if member:
                members.append(member)
        
        if not members:
            members = []
            for mention in users.split():
                if mention.startswith('<@') and mention.endswith('>'):
                    user_id = mention[2:-1]
                    if user_id.startswith('!'):
                        user_id = user_id[1:]
                    if user_id.isdigit():
                        member = interaction.guild.get_member(int(user_id))
                        if member:
                            members.append(member)
    except Exception as e:
        return await interaction.followup.send(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {str(e)}",
            ephemeral=True
        )
    
    if not members:
        return await interaction.followup.send(
            "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –≤–∞–ª—ñ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
            ephemeral=True
        )
    
    success_count = 0
    failed_members = []
    
    for member in members:
        try:
            await member.remove_roles(role)
            success_count += 1
        except:
            failed_members.append(member.display_name)
    
    kyiv_tz = pytz.timezone('Europe/Kiev')
    current_time = datetime.now(kyiv_tz)
    
    embed = discord.Embed(
        title=f"üîπ –†–æ–ª—å {role.name} –≤–∏–¥–∞–ª–µ–Ω–∞",
        color=discord.Color.orange(),
        timestamp=current_time
    )
    
    embed.add_field(
        name="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
        value=str(success_count),
        inline=True
    )
    
    if reason:
        embed.add_field(
            name="–ü—Ä–∏—á–∏–Ω–∞",
            value=reason,
            inline=True
        )
    
    if failed_members:
        embed.add_field(
            name="–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–ª—å",
            value=", ".join(failed_members),
            inline=False
        )
    
    embed.set_footer(
        text=f"–í–∏–∫–æ–Ω–∞–≤: {interaction.user.display_name}",
        icon_url=interaction.user.display_avatar.url
    )
    
    target_channel = channel or interaction.channel
    try:
        await target_channel.send(embed=embed)
        await interaction.followup.send(
            f"‚úÖ –†–æ–ª—å {role.mention} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ —É {success_count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
            ephemeral=True
        )
    except discord.Forbidden:
        await interaction.followup.send(
            "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–ª—ñ",
            ephemeral=True
        )

@bot.tree.command(name="online_members", description="–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω-–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
@app_commands.describe(
    channel="–ö–∞–Ω–∞–ª –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫—É (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)"
)
async def online_members(
    interaction: discord.Interaction,
    channel: Optional[discord.TextChannel] = None
):
    await interaction.response.defer(ephemeral=True)
    
    online_members = []
    idle_members = []
    dnd_members = []
    offline_members = []
    
    for member in interaction.guild.members:
        if member.bot:
            continue
            
        if member.status == discord.Status.online:
            online_members.append(member)
        elif member.status == discord.Status.idle:
            idle_members.append(member)
        elif member.status == discord.Status.dnd:
            dnd_members.append(member)
        else:
            offline_members.append(member)
    
    kyiv_tz = pytz.timezone('Europe/Kiev')
    current_time = datetime.now(kyiv_tz)
    
    embed = discord.Embed(
        title=f"üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ {interaction.guild.name}",
        color=discord.Color.blurple(),
        timestamp=current_time
    )
    
    embed.set_thumbnail(url=interaction.guild.icon.url if interaction.guild.icon else None)
    
    if online_members:
        embed.add_field(
            name=f"üü¢ –û–Ω–ª–∞–π–Ω ({len(online_members)})",
            value="\n".join([f"{member.mention} - {member.display_name}" for member in online_members[:20]]),
            inline=True
        )
        if len(online_members) > 20:
            embed.add_field(
                name="...",
                value=f"–Ü —â–µ {len(online_members) - 20} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
                inline=True
            )
    
    if idle_members:
        embed.add_field(
            name=f"üåô –í—ñ–¥—ñ–π—à–ª–∏ ({len(idle_members)})",
            value="\n".join([f"{member.mention} - {member.display_name}" for member in idle_members[:10]]),
            inline=True
        )
        if len(idle_members) > 10:
            embed.add_field(
                name="...",
                value=f"–Ü —â–µ {len(idle_members) - 10} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
                inline=True
            )
    
    if dnd_members:
        embed.add_field(
            name=f"‚õî –ù–µ —Ç—É—Ä–±—É–≤–∞—Ç–∏ ({len(dnd_members)})",
            value="\n".join([f"{member.mention} - {member.display_name}" for member in dnd_members[:10]]),
            inline=True
        )
        if len(dnd_members) > 10:
            embed.add_field(
                name="...",
                value=f"–Ü —â–µ {len(dnd_members) - 10} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
                inline=True
            )
    
    embed.add_field(
        name="üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        value=(
            f"‚Ä¢ –£—Å—å–æ–≥–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤: {len(interaction.guild.members)}\n"
            f"‚Ä¢ –ë–æ—Ç—ñ–≤: {len([m for m in interaction.guild.members if m.bot])}\n"
            f"‚Ä¢ –û–Ω–ª–∞–π–Ω: {len(online_members)} ({len(online_members)/len(interaction.guild.members)*100:.1f}%)\n"
            f"‚Ä¢ –û—Ñ–ª–∞–π–Ω: {len(offline_members)} ({len(offline_members)/len(interaction.guild.members)*100:.1f}%)"
        ),
        inline=False
    )
    
    embed.set_footer(
        text=f"–°—Ç–∞–Ω–æ–º –Ω–∞ {current_time.strftime('%d.%m.%Y –æ %H:%M')} (–ö–∏—ó–≤)"
    )
    
    target_channel = channel or interaction.channel
    try:
        await target_channel.send(embed=embed)
        await interaction.followup.send(
            "‚úÖ –°–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω-–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ",
            ephemeral=True
        )
    except discord.Forbidden:
        await interaction.followup.send(
            "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω-–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
            ephemeral=True
        )

# ========== –ü–û–ü–ï–†–ï–î–ù–Ü –ö–û–ú–ê–ù–î–ò ==========

@bot.tree.command(name="assign_role_to_invite", description="–ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ —Ä–æ–ª—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è")
@app_commands.describe(
    invite="–ö–æ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è (–±–µ–∑ discord.gg/)",
    role="–†–æ–ª—å –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è"
)
async def assign_role_to_invite(interaction: discord.Interaction, invite: str, role: discord.Role):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", ephemeral=True)
    
    try:
        invites = await interaction.guild.invites()
        if not any(inv.code == invite for inv in invites):
            return await interaction.response.send_message("‚ùå –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", ephemeral=True)
        
        guild_id = str(interaction.guild.id)
        if guild_id not in invite_roles:
            invite_roles[guild_id] = {}
        
        invite_roles[guild_id][invite] = role.id
        save_invite_data()
        await update_invite_cache(interaction.guild)
        
        await interaction.response.send_message(
            f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ, —è–∫—ñ –ø—Ä–∏–π–¥—É—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è `{invite}`, –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º—É—Ç—å —Ä–æ–ª—å {role.mention}",
            ephemeral=True
        )
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}",
            ephemeral=True
        )

@bot.tree.command(name="track_voice", description="–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —É –≥–æ–ª–æ—Å–æ–≤–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö")
@app_commands.describe(
    voice_channel="–ì–æ–ª–æ—Å–æ–≤–∏–π –∫–∞–Ω–∞–ª –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è",
    log_channel="–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å",
    delete_after="–ß–µ—Ä–µ–∑ —Å–∫—ñ–ª—å–∫–∏ —Ö–≤–∏–ª–∏–Ω –≤–∏–¥–∞–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
)
async def track_voice(
    interaction: discord.Interaction, 
    voice_channel: discord.VoiceChannel, 
    log_channel: discord.TextChannel,
    delete_after: int = 5
):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤", ephemeral=True)
    
    tracked_channels[interaction.guild.id] = {
        "voice_channel": voice_channel.id,
        "log_channel": log_channel.id,
        "delete_after": delete_after
    }
    
    await interaction.response.send_message(
        f"üîä –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–Ω—è {voice_channel.mention} –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ\n"
        f"üìù –õ–æ–≥—É–≤–∞–Ω–Ω—è —É {log_channel.mention}\n"
        f"‚è≥ –ê–≤—Ç–æ–≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ {delete_after} —Ö–≤",
        ephemeral=True
    )

@bot.tree.command(name="remove_default_only", description="–í–∏–¥–∞–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç—ñ–ª—å–∫–∏ –∑ @everyone")
async def remove_default_only(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤", ephemeral=True)
    
    await interaction.response.defer(ephemeral=True)
    deleted = 0
    
    for member in interaction.guild.members:
        if not member.bot and len(member.roles) == 1:
            try:
                await member.kick(reason="–¢—ñ–ª—å–∫–∏ @everyone")
                deleted += 1
            except: 
                pass
    
    await interaction.followup.send(f"–í–∏–¥–∞–ª–µ–Ω–æ {deleted} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", ephemeral=True)

@bot.tree.command(name="remove_by_role", description="–í–∏–¥–∞–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ä–æ–ª–ª—é")
@app_commands.describe(role="–†–æ–ª—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
async def remove_by_role(interaction: discord.Interaction, role: discord.Role):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤", ephemeral=True)
    
    if role == interaction.guild.default_role:
        return await interaction.response.send_message("–ù–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª—è—Ç–∏ –≤—Å—ñ—Ö", ephemeral=True)
    
    await interaction.response.defer(ephemeral=True)
    deleted = 0
    
    for member in role.members:
        if not member.bot:
            try:
                await member.kick(reason=f"–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–ª—ñ {role.name}")
                deleted += 1
            except: 
                pass
    
    await interaction.followup.send(
        f"–í–∏–¥–∞–ª–µ–Ω–æ {deleted} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ä–æ–ª–ª—é {role.name}", 
        ephemeral=True
    )

@bot.tree.command(name="list_no_roles", description="–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–µ–∑ —Ä–æ–ª–µ–π")
async def list_no_roles(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤", ephemeral=True)
    
    await interaction.response.defer(ephemeral=True)
    members = [f"{m.display_name} ({m.id})" for m in interaction.guild.members 
               if not m.bot and len(m.roles) == 1]
    
    if not members:
        return await interaction.followup.send("–ù–µ–º–∞—î —Ç–∞–∫–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", ephemeral=True)
    
    chunks = [members[i:i+20] for i in range(0, len(members), 20)]
    for i, chunk in enumerate(chunks):
        msg = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –±–µ–∑ —Ä–æ–ª–µ–π (—á–∞—Å—Ç–∏–Ω–∞ {i+1}):\n" + "\n".join(chunk)
        await interaction.followup.send(msg, ephemeral=True)

@bot.tree.command(name="show_role_users", description="–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ä–æ–ª–ª—é")
@app_commands.describe(role="–†–æ–ª—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É")
async def show_role_users(interaction: discord.Interaction, role: discord.Role):
    await interaction.response.defer(ephemeral=True)
    members = [f"{m.mention} ({m.display_name})" for m in role.members if not m.bot]
    
    if not members:
        return await interaction.followup.send(
            f"–ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ä–æ–ª–ª—é {role.name}", 
            ephemeral=True
        )
    
    chunks = [members[i:i+15] for i in range(0, len(members), 15)]
    for i, chunk in enumerate(chunks):
        embed = discord.Embed(
            title=f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑ —Ä–æ–ª–ª—é {role.name} ({len(members)})",
            description="\n".join(chunk),
            color=role.color
        )
        await interaction.followup.send(embed=embed, ephemeral=True)

@bot.tree.command(name="send_embed", description="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ embed-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –≤–∫–∞–∑–∞–Ω–∏–π –∫–∞–Ω–∞–ª")
@app_commands.describe(
    channel="–¢–µ–∫—Å—Ç–æ–≤–∏–π –∫–∞–Ω–∞–ª –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è",
    title="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
    description="–û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ \\n –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞)",
    color="–ö–æ–ª—ñ—Ä —Ä–∞–º–∫–∏ (–æ–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É)",
    thumbnail="–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª—É (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)",
    image="–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)"
)
@app_commands.choices(color=[
    app_commands.Choice(name="üîµ –°–∏–Ω—ñ–π", value="blue"),
    app_commands.Choice(name="üü¢ –ó–µ–ª–µ–Ω–∏–π", value="green"),
    app_commands.Choice(name="üî¥ –ß–µ—Ä–≤–æ–Ω–∏–π", value="red"),
    app_commands.Choice(name="üü° –ñ–æ–≤—Ç–∏–π", value="yellow"),
    app_commands.Choice(name="üü£ –§—ñ–æ–ª–µ—Ç–æ–≤–∏–π", value="purple"),
    app_commands.Choice(name="üü† –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π", value="orange"),
    app_commands.Choice(name="üåà –í–∏–ø–∞–¥–∫–æ–≤–∏–π", value="random")
])
async def send_embed(
    interaction: discord.Interaction,
    channel: discord.TextChannel,
    title: str,
    description: str,
    color: app_commands.Choice[str],
    thumbnail: Optional[discord.Attachment] = None,
    image: Optional[discord.Attachment] = None
):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message(
            "‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º", 
            ephemeral=True
        )
    
    color_map = {
        "blue": discord.Color.blue(),
        "green": discord.Color.green(),
        "red": discord.Color.red(),
        "yellow": discord.Color.gold(),
        "purple": discord.Color.purple(),
        "orange": discord.Color.orange(),
        "random": discord.Color.random()
    }
    selected_color = color_map.get(color.value, discord.Color.blue())
    
    embed = discord.Embed(
        title=title,
        description=description.replace('\\n', '\n'),
        color=selected_color,
        timestamp=datetime.utcnow()
    )
    
    if thumbnail and thumbnail.content_type.startswith('image/'):
        embed.set_thumbnail(url=thumbnail.url)
    
    if image and image.content_type.startswith('image/'):
        embed.set_image(url=image.url)
   
    try:
        await channel.send(embed=embed)
        await interaction.response.send_message(
            f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–æ {channel.mention}",
            ephemeral=True
        )
    except discord.Forbidden:
        await interaction.response.send_message(
            "‚ùå –ë–æ—Ç –Ω–µ –º–∞—î –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É —Ü–µ–π –∫–∞–Ω–∞–ª",
            ephemeral=True
        )
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}",
            ephemeral=True
        )

@bot.tree.command(name="setup_welcome", description="–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
@app_commands.describe(
    channel="–ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"
)
async def setup_welcome(interaction: discord.Interaction, channel: discord.TextChannel):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", ephemeral=True)
    
    welcome_messages[str(interaction.guild.id)] = {
        "channel_id": channel.id
    }
    save_welcome_data()
    
    await interaction.response.send_message(
        f"‚úÖ –ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥—É—Ç—å –Ω–∞–¥—Å–∏–ª–∞—Ç–∏—Å—è —É –∫–∞–Ω–∞–ª {channel.mention}\n"
        f"–¢–µ–ø–µ—Ä –ø—Ä–∏ –≤—Ö–æ–¥—ñ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞ –±—É–¥–µ –ø–æ–∫–∞–∑–∞–Ω–æ:\n"
        f"- –ê–≤–∞—Ç–∞—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
        f"- –Ü–º'—è —Ç–∞ –º—ñ—Ç–∫—É\n"
        f"- –•—Ç–æ –∑–∞–ø—Ä–æ—Å–∏–≤\n"
        f"- –ü—Ä–∏–∑–Ω–∞—á–µ–Ω—É —Ä–æ–ª—å\n"
        f"- –î–∞—Ç—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤ Discord\n"
        f"- –ß–∞—Å –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞",
        ephemeral=True
    )

@bot.tree.command(name="disable_welcome", description="–í–∏–º–∫–Ω—É—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
async def disable_welcome(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", ephemeral=True)
    
    if str(interaction.guild.id) in welcome_messages:
        welcome_messages.pop(str(interaction.guild.id))
        save_welcome_data()
    
    await interaction.response.send_message(
        "‚úÖ –ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ",
        ephemeral=True
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
TOKEN = os.getenv('DISCORD_TOKEN')
if not TOKEN:
    raise ValueError("–í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–æ–∫–µ–Ω Discord")

if __name__ == '__main__':
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    bot.run(TOKEN)