import discord
from discord import app_commands
from discord.ext import commands, tasks
import os
from datetime import datetime, timedelta

intents = discord.Intents.default()
intents.members = True
intents.guilds = True
intents.message_content = True
intents.voice_states = True  # –î–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤

bot = commands.Bot(command_prefix="!", intents=intents)

# –°–ª–æ–≤–Ω–∏–∫–∏ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
voice_time_tracker = {}
tracked_channels = {}  # {guild_id: {"voice_channel": voice_channel_id, "log_channel": log_channel_id}}
warning_sent = set()   # –î–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏—Ö –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å

@bot.event
async def on_ready():
    print(f'–ë–æ—Ç {bot.user} —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–æ Discord!')
    try:
        synced = await bot.tree.sync()
        print(f"–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∫–æ–º–∞–Ω–¥: {e}")
    check_voice_activity.start()

@tasks.loop(minutes=1)
async def check_voice_activity():
    current_time = datetime.utcnow()
    for guild_id, data in tracked_channels.items():
        guild = bot.get_guild(guild_id)
        if not guild:
            continue
            
        voice_channel = guild.get_channel(data["voice_channel"])
        log_channel = guild.get_channel(data["log_channel"])
        
        if not voice_channel or not log_channel:
            continue
            
        for member in voice_channel.members:
            if member.bot:
                continue
                
            member_key = f"{guild_id}_{member.id}"
            
            if member_key not in voice_time_tracker:
                voice_time_tracker[member_key] = current_time
                warning_sent.discard(member_key)
                continue
                
            time_in_channel = current_time - voice_time_tracker[member_key]
            
            # –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 10 —Ö–≤–∏–ª–∏–Ω
            if time_in_channel > timedelta(minutes=10) and member_key not in warning_sent:
                try:
                    await member.send(
                        "‚ö†Ô∏è –í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ñ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ –±—ñ–ª—å—à–µ 10 —Ö–≤–∏–ª–∏–Ω. "
                        "‚úÖ–ë—É–¥—å—Ç–µ –∞–∫—Ç–∏–≤–Ω—ñ –∞–±–æ –≤–∏–π–¥—ñ—Ç—å, —ñ–Ω–∞–∫—à–µ –≤–∏ –±—É–¥–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω—ñ."
                    )
                    warning_sent.add(member_key)
                except Exception as e:
                    print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è {member}: {e}")
            
            # –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 15 —Ö–≤–∏–ª–∏–Ω
            if time_in_channel > timedelta(minutes=15):
                try:
                    await member.move_to(None, reason="–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å")
                    await log_channel.send(
                        f"üî¥ {member.mention} –±—É–≤ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –∑ {voice_channel.mention} "
                        f"—á–µ—Ä–µ–∑ –Ω–∞–¥—Ç–æ —Ç—Ä–∏–≤–∞–ª–µ –ø–µ—Ä–µ–±—É–≤–∞–Ω–Ω—è ({time_in_channel.seconds//60} —Ö–≤)."
                    )
                    del voice_time_tracker[member_key]
                    warning_sent.discard(member_key)
                except Exception as e:
                    print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫–ª—é—á–∏—Ç–∏ {member}: {e}")

@bot.event
async def on_voice_state_update(member, before, after):
    if before.channel and before.channel.id in [data["voice_channel"] for data in tracked_channels.values()]:
        member_key = f"{member.guild.id}_{member.id}"
        if member_key in voice_time_tracker:
            del voice_time_tracker[member_key]
            warning_sent.discard(member_key)

# ========== –ù–û–í–ê –ö–û–ú–ê–ù–î–ê ==========
@bot.tree.command(name="track_voice", description="–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —É –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—ñ")
@app_commands.describe(
    voice_channel="–ì–æ–ª–æ—Å–æ–≤–∏–π –∫–∞–Ω–∞–ª –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è",
    log_channel="–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"
)
async def track_voice(interaction: discord.Interaction, 
                     voice_channel: discord.VoiceChannel, 
                     log_channel: discord.TextChannel):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.", ephemeral=True)
        return
    
    tracked_channels[interaction.guild_id] = {
        "voice_channel": voice_channel.id,
        "log_channel": log_channel.id
    }
    
    await interaction.response.send_message(
        f"üîä –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É {voice_channel.mention} –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.\n"
        f"üìù –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏ —É {log_channel.mention}.\n"
        "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –æ—Ç—Ä–∏–º–∞—é—Ç—å –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 10 —Ö–≤–∏–ª–∏–Ω —Ç–∞ –±—É–¥—É—Ç—å –≤—ñ–¥–∫–ª—é—á–µ–Ω—ñ —á–µ—Ä–µ–∑ 15 —Ö–≤–∏–ª–∏–Ω.",
        ephemeral=True
    )

# ========== –Ü–°–ù–£–Æ–ß–Ü –ö–û–ú–ê–ù–î–ò (–ë–ï–ó –ó–ú–Ü–ù) ==========
@bot.tree.command(name="remove_default_only", description="–í–∏–¥–∞–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –º–∞—é—Ç—å —Ç—ñ–ª—å–∫–∏ —Ä–æ–ª—å @everyone")
async def remove_default_only(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.", ephemeral=True)
        return
    
    await interaction.response.defer(ephemeral=True)
    
    guild = interaction.guild
    deleted_count = 0
    
    for member in guild.members:
        if not member.bot and len(member.roles) == 1:
            try:
                await member.kick(reason="–ú–∞—î —Ç—ñ–ª—å–∫–∏ —Ä–æ–ª—å @everyone")
                deleted_count += 1
            except Exception as e:
                print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ {member}: {e}")
    
    await interaction.followup.send(f"–í–∏–¥–∞–ª–µ–Ω–æ {deleted_count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –º–∞–ª–∏ —Ç—ñ–ª—å–∫–∏ —Ä–æ–ª—å @everyone.", ephemeral=True)

@bot.tree.command(name="remove_by_role", description="–í–∏–¥–∞–ª—è—î –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –æ–±—Ä–∞–Ω–æ—é —Ä–æ–ª–ª—é")
@app_commands.describe(role="–†–æ–ª—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
async def remove_by_role(interaction: discord.Interaction, role: discord.Role):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.", ephemeral=True)
        return
    
    if role == interaction.guild.default_role:
        await interaction.response.send_message("–ù–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª—è—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Å–µ—Ä–≤–µ—Ä–∞.", ephemeral=True)
        return
    
    await interaction.response.defer(ephemeral=True)
    
    deleted_count = 0
    
    for member in role.members:
        if not member.bot:
            try:
                await member.kick(reason=f"–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ä–æ–ª—ñ {role.name}")
                deleted_count += 1
            except Exception as e:
                print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ {member}: {e}")
    
    await interaction.followup.send(f"–í–∏–¥–∞–ª–µ–Ω–æ {deleted_count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ä–æ–ª–ª—é {role.name}.", ephemeral=True)

@bot.tree.command(name="list_no_roles", description="–í–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–µ–∑ –∂–æ–¥–Ω–∏—Ö —Ä–æ–ª–µ–π (–∫—Ä—ñ–º @everyone)")
async def list_no_roles(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.", ephemeral=True)
        return
    
    await interaction.response.defer(ephemeral=True)
    
    members_without_roles = []
    
    for member in interaction.guild.members:
        if not member.bot and len(member.roles) == 1:
            members_without_roles.append(f"{member.display_name} ({member.id})")
    
    if not members_without_roles:
        await interaction.followup.send("–ù–∞ —Å–µ—Ä–≤–µ—Ä—ñ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–µ–∑ —Ä–æ–ª–µ–π.", ephemeral=True)
        return
    
    chunks = [members_without_roles[i:i + 20] for i in range(0, len(members_without_roles), 20)]
    
    for i, chunk in enumerate(chunks):
        message = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –±–µ–∑ —Ä–æ–ª–µ–π (—á–∞—Å—Ç–∏–Ω–∞ {i+1}):\n" + "\n".join(chunk)
        if i == 0:
            await interaction.followup.send(message, ephemeral=True)
        else:
            await interaction.followup.send(message, ephemeral=True)

@bot.tree.command(name="show_role_users", description="–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –æ–±—Ä–∞–Ω–æ—é —Ä–æ–ª–ª—é")
@app_commands.describe(role="–†–æ–ª—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É")
async def show_role_users(interaction: discord.Interaction, role: discord.Role):
    await interaction.response.defer(ephemeral=True)
    
    members = [f"{member.mention} ({member.display_name})" 
               for member in role.members 
               if not member.bot]
    
    if not members:
        await interaction.followup.send(f"üîç –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ä–æ–ª–ª—é **{role.name}**.", ephemeral=True)
        return
    
    chunk_size = 15
    for i in range(0, len(members), chunk_size):
        chunk = members[i:i + chunk_size]
        embed = discord.Embed(
            title=f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑ —Ä–æ–ª–ª—é {role.name} ({len(members)} –≤—Å—å–æ–≥–æ)",
            description="\n".join(chunk),
            color=role.color
        )
        await interaction.followup.send(embed=embed, ephemeral=True)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
TOKEN = os.getenv('DISCORD_TOKEN')
if not TOKEN:
    raise ValueError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ DISCORD_TOKEN")

bot.run(TOKEN)
