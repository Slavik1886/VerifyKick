import discord
from discord import app_commands
from discord.ext import commands, tasks
import os
from datetime import datetime, timedelta, timezone
import asyncio
from collections import defaultdict
import json
import random
import aiohttp
from typing import Optional
import pytz
from discord.ui import View, Button, Modal, TextInput, Select
import feedparser
import re
from html import unescape

intents = discord.Intents.default()
intents.members = True
intents.guilds = True
intents.message_content = True
intents.voice_states = True
intents.invites = True

bot = commands.Bot(command_prefix="!", intents=intents)

# –°–∏—Å—Ç–µ–º–∏ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
voice_time_tracker = {}
tracked_channels = {}
warning_sent = set()
voice_activity = defaultdict(timedelta)
last_activity_update = datetime.utcnow()

# –°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π –∑–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è–º–∏
invite_roles = {}
invite_cache = {}

# –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
welcome_messages = {}

def load_invite_data():
    try:
        with open('invite_roles.json', 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_invite_data():
    with open('invite_roles.json', 'w') as f:
        json.dump(invite_roles, f)

def load_welcome_data():
    try:
        with open('welcome_messages.json', 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_welcome_data():
    with open('welcome_messages.json', 'w') as f:
        json.dump(welcome_messages, f)

invite_roles = load_invite_data()
welcome_messages = load_welcome_data()

async def get_wg_api_data(endpoint: str, params: dict) -> Optional[dict]:
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ Wargaming API"""
    # params['application_id'] = WG_API_KEY  # –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Ä–∞—Å–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ —ñ –¥–æ–¥–∞–π—Ç–µ –∫–ª—é—á
    # async with aiohttp.ClientSession() as session:
    #     try:
    #         async with session.get(f"{WG_API_URL}{endpoint}", params=params) as resp:
    #             if resp.status == 200:
    #                 data = await resp.json()
    #                 return data.get('data') if 'data' in data else data
    #             print(f"–ü–æ–º–∏–ª–∫–∞ API: {resp.status} - {await resp.text()}")
    #     except Exception as e:
    #         print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ API: {e}")
    return None

async def update_invite_cache(guild):
    try:
        invites = await guild.invites()
        invite_cache[guild.id] = {invite.code: invite.uses for invite in invites}
    except discord.Forbidden:
        print(f"–ù–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É –Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥ –∑–∞–ø—Ä–æ—à–µ–Ω—å –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {guild.name}")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É –∑–∞–ø—Ä–æ—à–µ–Ω—å: {e}")

async def delete_after(message, minutes):
    if minutes <= 0: return
    await asyncio.sleep(minutes * 60)
    try: await message.delete()
    except: pass

@tasks.loop(minutes=1)
async def update_voice_activity():
    global last_activity_update
    now = datetime.utcnow()
    time_elapsed = now - last_activity_update
    last_activity_update = now
    
    for guild in bot.guilds:
        for voice_channel in guild.voice_channels:
            for member in voice_channel.members:
                if not member.bot:
                    voice_activity[member.id] += time_elapsed

@tasks.loop(minutes=1)
async def check_voice_activity():
    current_time = datetime.utcnow()
    for guild_id, data in tracked_channels.items():
        guild = bot.get_guild(guild_id)
        if not guild: continue
            
        voice_channel = guild.get_channel(data["voice_channel"])
        log_channel = guild.get_channel(data["log_channel"])
        if not voice_channel or not log_channel: continue
            
        for member in voice_channel.members:
            if member.bot: continue
                
            member_key = f"{guild_id}_{member.id}"
            
            if member_key not in voice_time_tracker:
                voice_time_tracker[member_key] = current_time
                warning_sent.discard(member_key)
                continue
                
            time_in_channel = current_time - voice_time_tracker[member_key]
            
            if time_in_channel > timedelta(minutes=10) and member_key not in warning_sent:
                try:
                    await member.send("‚ö†Ô∏è –í–∏ –≤ –∫–∞–Ω–∞–ª—ñ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤–∂–µ 10+ —Ö–≤–∏–ª–∏–Ω. ‚úÖ –ë—É–¥—å—Ç–µ –∞–∫—Ç–∏–≤–Ω—ñ, –∞–±–æ –í–∏ –±—É–¥–µ—Ç–µ –≤—ñ–¥—î–¥–Ω–∞–Ω—ñ!")
                    warning_sent.add(member_key)
                except: pass
            
            if time_in_channel > timedelta(minutes=15):
                try:
                    await member.move_to(None)
                    msg = await log_channel.send(f"üî¥ {member.mention} –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ")
                    bot.loop.create_task(delete_after(msg, data["delete_after"]))
                    del voice_time_tracker[member_key]
                    warning_sent.discard(member_key)
                except: pass

@bot.event
async def on_voice_state_update(member, before, after):
    if before.channel and before.channel.id in [data["voice_channel"] for data in tracked_channels.values()]:
        member_key = f"{member.guild.id}_{member.id}"
        if member_key in voice_time_tracker:
            del voice_time_tracker[member_key]
            warning_sent.discard(member_key)

# ========== –ö–û–ú–ê–ù–î–ò ==========

@bot.tree.command(name="assign_role_to_invite", description="–ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ —Ä–æ–ª—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è")
@app_commands.describe(
    invite="–ö–æ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è (–±–µ–∑ discord.gg/)",
    role="–†–æ–ª—å –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è"
)
async def assign_role_to_invite(interaction: discord.Interaction, invite: str, role: discord.Role):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", ephemeral=True)
    try:
        invites = await interaction.guild.invites()
        if not any(inv.code == invite for inv in invites):
            return await interaction.response.send_message("‚ùå –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", ephemeral=True)
        guild_id = str(interaction.guild.id)
        if guild_id not in invite_roles:
            invite_roles[guild_id] = {}
        invite_roles[guild_id][invite] = role.id
        save_invite_data()
        await update_invite_cache(interaction.guild)
        await interaction.response.send_message(
            f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ, —è–∫—ñ –ø—Ä–∏–π–¥—É—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è `{invite}`, –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º—É—Ç—å —Ä–æ–ª—å {role.mention}",
            ephemeral=True
        )
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}",
            ephemeral=True
        )

@bot.tree.command(name="track_voice", description="–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —É –≥–æ–ª–æ—Å–æ–≤–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö")
@app_commands.describe(
    voice_channel="–ì–æ–ª–æ—Å–æ–≤–∏–π –∫–∞–Ω–∞–ª –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è",
    log_channel="–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å",
    delete_after="–ß–µ—Ä–µ–∑ —Å–∫—ñ–ª—å–∫–∏ —Ö–≤–∏–ª–∏–Ω –≤–∏–¥–∞–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
)
async def track_voice(interaction: discord.Interaction, 
                     voice_channel: discord.VoiceChannel, 
                     log_channel: discord.TextChannel,
                     delete_after: int = 5):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤", ephemeral=True)
        return
    tracked_channels[interaction.guild_id] = {
        "voice_channel": voice_channel.id,
        "log_channel": log_channel.id,
        "delete_after": delete_after
    }
    await interaction.response.send_message(
        f"üîä –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–Ω—è {voice_channel.mention} –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ\n"
        f"üìù –õ–æ–≥—É–≤–∞–Ω–Ω—è —É {log_channel.mention}\n"
        f"‚è≥ –ê–≤—Ç–æ–≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ {delete_after} —Ö–≤",
        ephemeral=True
    )

@bot.tree.command(name="remove_default_only", description="–í–∏–¥–∞–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç—ñ–ª—å–∫–∏ –∑ @everyone")
async def remove_default_only(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤", ephemeral=True)
        return
    try:
        await interaction.response.defer(ephemeral=True)
        deleted = 0
        for member in interaction.guild.members:
            if not member.bot and len(member.roles) == 1:
                try:
                    await member.kick(reason="–¢—ñ–ª—å–∫–∏ @everyone")
                    deleted += 1
                except: pass
        await interaction.followup.send(f"–í–∏–¥–∞–ª–µ–Ω–æ {deleted} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", ephemeral=True)
    except Exception as e:
        await interaction.followup.send(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", ephemeral=True)

@bot.tree.command(name="remove_by_role", description="–í–∏–¥–∞–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ä–æ–ª–ª—é")
@app_commands.describe(role="–†–æ–ª—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
async def remove_by_role(interaction: discord.Interaction, role: discord.Role):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤", ephemeral=True)
        return
    if role == interaction.guild.default_role:
        await interaction.response.send_message("–ù–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª—è—Ç–∏ –≤—Å—ñ—Ö", ephemeral=True)
        return
    try:
        await interaction.response.defer(ephemeral=True)
        deleted = 0
        for member in role.members:
            if not member.bot:
                try:
                    await member.kick(reason=f"–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–ª—ñ {role.name}")
                    deleted += 1
                except: pass
        await interaction.followup.send(f"–í–∏–¥–∞–ª–µ–Ω–æ {deleted} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ä–æ–ª–ª—é {role.name}", ephemeral=True)
    except Exception as e:
        await interaction.followup.send(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", ephemeral=True)

@bot.tree.command(name="list_no_roles", description="–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–µ–∑ —Ä–æ–ª–µ–π")
async def list_no_roles(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤", ephemeral=True)
        return
    try:
        await interaction.response.defer(ephemeral=True)
        members = [f"{m.display_name} ({m.id})" for m in interaction.guild.members 
               if not m.bot and len(m.roles) == 1]
        if not members:
            await interaction.followup.send("–ù–µ–º–∞—î —Ç–∞–∫–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", ephemeral=True)
            return
        chunks = [members[i:i+20] for i in range(0, len(members), 20)]
        for i, chunk in enumerate(chunks):
            msg = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –±–µ–∑ —Ä–æ–ª–µ–π (—á–∞—Å—Ç–∏–Ω–∞ {i+1}):\n" + "\n".join(chunk)
            await interaction.followup.send(msg, ephemeral=True)
    except Exception as e:
        await interaction.followup.send(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", ephemeral=True)

@bot.tree.command(name="show_role_users", description="–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ä–æ–ª–ª—é")
@app_commands.describe(role="–†–æ–ª—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É")
async def show_role_users(interaction: discord.Interaction, role: discord.Role):
    try:
        await interaction.response.defer(ephemeral=True)
        members = [f"{m.mention} ({m.display_name})" for m in role.members if not m.bot]
        if not members:
            await interaction.followup.send(f"–ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ä–æ–ª–ª—é {role.name}", ephemeral=True)
            return
        chunks = [members[i:i+15] for i in range(0, len(members), 15)]
        for i, chunk in enumerate(chunks):
            embed = discord.Embed(
                title=f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑ —Ä–æ–ª–ª—é {role.name} ({len(members)})",
                description="\n".join(chunk),
                color=role.color
            )
            await interaction.followup.send(embed=embed, ephemeral=True)
    except Exception as e:
        await interaction.followup.send(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", ephemeral=True)

# ========== –ù–û–í–ò–ô /send_embed –∑ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑ –ø—Ä–∏—Å—Ç—Ä–æ—é ========== 
from discord.ui import View, Select, Modal, TextInput, Button

class SendEmbedData:
    def __init__(self, channel_id=None, title=None, description=None, thumbnail_url=None, image_url=None, footer=None):
        self.channel_id = channel_id
        self.title = title
        self.description = description
        self.thumbnail_url = thumbnail_url
        self.image_url = image_url
        self.footer = footer

send_embed_cache = {}

class SendEmbedChannelView(View):
    def __init__(self, user, text_channels):
        super().__init__(timeout=60)
        self.user = user
        options = [
            discord.SelectOption(label=ch.name, value=str(ch.id)) for ch in text_channels[:25]
        ]
        self.add_item(SendEmbedChannelDropdown(options, self))
    async def interaction_check(self, interaction):
        return interaction.user.id == self.user.id

class SendEmbedChannelDropdown(Select):
    def __init__(self, options, parent_view):
        super().__init__(placeholder="–û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è embed-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", min_values=1, max_values=1, options=options)
        self.parent_view = parent_view
    async def callback(self, interaction):
        channel_id = int(self.values[0])
        send_embed_cache[interaction.user.id] = SendEmbedData(channel_id=channel_id)
        if interaction.response.is_done():
            await interaction.followup.send("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: interaction –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.", ephemeral=True)
            return
        await interaction.response.send_modal(SendEmbedTitleModal())
        self.parent_view.stop()

class SendEmbedTitleModal(Modal, title="–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫"):
    title = TextInput(label="–ó–∞–≥–æ–ª–æ–≤–æ–∫", required=True, max_length=256)
    async def on_submit(self, interaction):
        data = send_embed_cache.get(interaction.user.id)
        if not data:
            await interaction.response.send_message("‚ùå –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ (–Ω–µ–º–∞—î —Å—Ç–∞–Ω—É)", ephemeral=True)
            return
        data.title = self.title.value
        await interaction.response.send_modal(SendEmbedDescriptionModal())

class SendEmbedDescriptionModal(Modal, title="–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"):
    description = TextInput(label="–¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", style=discord.TextStyle.paragraph, required=True, max_length=2000)
    async def on_submit(self, interaction):
        data = send_embed_cache.get(interaction.user.id)
        if not data:
            await interaction.response.send_message("‚ùå –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ (–Ω–µ–º–∞—î —Å—Ç–∞–Ω—É)", ephemeral=True)
            return
        data.description = self.description.value
        # –ü—ñ—Å–ª—è —Ç–µ–∫—Å—Ç—É ‚Äî –∑–∞–ø–∏—Ç –Ω–∞ thumbnail
        await interaction.response.send_message(
            "–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è-–∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª (thumbnail)? –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'.",
            view=SendEmbedImageUploadView(interaction.user.id, 'thumbnail'),
            ephemeral=True
        )

class SendEmbedImageUploadView(View):
    def __init__(self, user_id, image_type):
        super().__init__(timeout=120)
        self.user_id = user_id
        self.image_type = image_type  # 'thumbnail' –∞–±–æ 'image'
        self.add_item(SendEmbedSkipButton(self))
    @discord.ui.button(label="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", style=discord.ButtonStyle.primary)
    async def upload(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_message(
            f"–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è {'thumbnail' if self.image_type == 'thumbnail' else 'image'} —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.",
            ephemeral=True
        )
    async def interaction_check(self, interaction):
        return interaction.user.id == self.user_id

class SendEmbedSkipButton(Button):
    def __init__(self, parent_view):
        super().__init__(label="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", style=discord.ButtonStyle.secondary)
        self.parent_view = parent_view
    async def callback(self, interaction):
        # –Ø–∫—â–æ —Ü–µ thumbnail ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ image
        if self.parent_view.image_type == 'thumbnail':
            await interaction.response.send_message(
                "–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–Ω–∏–∑—É embed? –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'.",
                view=SendEmbedImageUploadView(self.parent_view.user_id, 'image'),
                ephemeral=True
            )
        else:
            # –î–∞–ª—ñ ‚Äî –ø—ñ–¥–ø–∏—Å
            await interaction.response.send_modal(SendEmbedFooterModal())

# –û–±—Ä–æ–±–∫–∞ –≤–∫–ª–∞–¥–µ–Ω—å (attachments) –¥–ª—è thumbnail —Ç–∞ image
@bot.event
async def on_message(message):
    # –ù–µ —Ä–µ–∞–≥—É–≤–∞—Ç–∏ –Ω–∞ –≤–ª–∞—Å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞
    if message.author.bot:
        return
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É –ø—Ä–æ—Ü–µ—Å—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è embed
    data = send_embed_cache.get(message.author.id)
    if not data:
        return
    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞–≤ –≤–∫–ª–∞–¥–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–ø–∏—Ç—É
    if message.attachments:
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ—á—ñ–∫—É—î—Ç—å—Å—è
        if not data.thumbnail_url:
            data.thumbnail_url = message.attachments[0].url
            # –ó–∞–ø–∏—Ç–∞—Ç–∏ –ø—Ä–æ image
            await message.channel.send(
                "–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–Ω–∏–∑—É embed? –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'.",
                view=SendEmbedImageUploadView(message.author.id, 'image'),
                delete_after=60
            )
        elif not data.image_url:
            data.image_url = message.attachments[0].url
            # –î–∞–ª—ñ ‚Äî –ø—ñ–¥–ø–∏—Å
            await message.channel.send(
                "–í–≤–µ–¥—ñ—Ç—å –ø—ñ–¥–ø–∏—Å (footer) –¥–ª—è embed (–∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–º):",
                view=None
            )
            await message.author.send_modal(SendEmbedFooterModal())
        await message.delete(delay=1)

class SendEmbedFooterModal(Modal, title="–î–æ–¥–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å (footer, –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)"):
    footer = TextInput(label="–ü—ñ–¥–ø–∏—Å (footer)", required=False, max_length=256)
    async def on_submit(self, interaction):
        data = send_embed_cache.pop(interaction.user.id, None)
        if not data:
            await interaction.response.send_message("‚ùå –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ (–Ω–µ–º–∞—î —Å—Ç–∞–Ω—É)", ephemeral=True)
            return
        data.footer = self.footer.value.strip() if self.footer.value else None
        channel = interaction.guild.get_channel(data.channel_id)
        if not channel or not isinstance(channel, discord.TextChannel):
            await interaction.response.send_message("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ —î —Ç–µ–∫—Å—Ç–æ–≤–∏–º!", ephemeral=True)
            return
        embed = discord.Embed(title=data.title, description=data.description, color=discord.Color.blurple(), timestamp=datetime.utcnow())
        if data.thumbnail_url:
            embed.set_thumbnail(url=data.thumbnail_url)
        if data.image_url:
            embed.set_image(url=data.image_url)
        if data.footer:
            embed.set_footer(text=data.footer)
        try:
            await channel.send(embed=embed)
            await interaction.response.send_message(f"‚úÖ Embed-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É {channel.mention}", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è: {e}", ephemeral=True)

# –ó–∞–º—ñ–Ω–∞ —Å—Ç–∞—Ä–æ—ó –∫–æ–º–∞–Ω–¥–∏ send_embed
@bot.tree.command(name="send_embed", description="–ó—Ä—É—á–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ embed-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –¥—ñ–∞–ª–æ–≥")
async def send_embed(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º", ephemeral=True)
        return
    text_channels = [ch for ch in interaction.guild.text_channels if ch.permissions_for(interaction.user).send_messages]
    if not text_channels:
        await interaction.response.send_message("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤", ephemeral=True)
        return
    view = SendEmbedChannelView(interaction.user, text_channels)
    await interaction.response.send_message("–û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è embed-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", view=view, ephemeral=True)

@bot.tree.command(name="setup_welcome", description="–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
@app_commands.describe(
    channel="–ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"
)
async def setup_welcome(interaction: discord.Interaction, channel: discord.TextChannel):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", ephemeral=True)
    welcome_messages[str(interaction.guild.id)] = {
        "channel_id": channel.id
    }
    save_welcome_data()
    await interaction.response.send_message(
        f"‚úÖ –ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥—É—Ç—å –Ω–∞–¥—Å–∏–ª–∞—Ç–∏—Å—è —É –∫–∞–Ω–∞–ª {channel.mention}\n"
        f"–¢–µ–ø–µ—Ä –ø—Ä–∏ –≤—Ö–æ–¥—ñ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞ –±—É–¥–µ –ø–æ–∫–∞–∑–∞–Ω–æ:\n"
        f"- –ê–≤–∞—Ç–∞—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
        f"- –Ü–º'—è —Ç–∞ –º—ñ—Ç–∫—É\n"
        f"- –•—Ç–æ –∑–∞–ø—Ä–æ—Å–∏–≤\n"
        f"- –ü—Ä–∏–∑–Ω–∞—á–µ–Ω—É —Ä–æ–ª—å\n"
        f"- –î–∞—Ç—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤ Discord\n"
        f"- –ß–∞—Å –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞",
        ephemeral=True
    )

@bot.tree.command(name="disable_welcome", description="–í–∏–º–∫–Ω—É—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
async def disable_welcome(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", ephemeral=True)
    if str(interaction.guild.id) in welcome_messages:
        welcome_messages.pop(str(interaction.guild.id))
        save_welcome_data()
    await interaction.response.send_message(
        "‚úÖ –ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ",
        ephemeral=True
    )

# ========== –ó–ê–Ø–í–ö–ê –ù–ê –ü–†–ò–Ñ–î–ù–ê–ù–ù–Ø ==========

MOD_CHANNEL_ID = 1318890524643557406  # <-- ID –∫–∞–Ω–∞–ª—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –∑–∞—è–≤–æ–∫
GUILD_INVITE_LINK = "https://discord.gg/yourinvite"  # <-- –í–∫–∞–∂—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è

class JoinRequestModal(Modal, title="–ó–∞–ø–∏—Ç –Ω–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è"):
    reason = TextInput(label="–ß–æ–º—É –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è?", style=discord.TextStyle.paragraph, required=True, max_length=300)
    async def on_submit(self, interaction: discord.Interaction):
        mod_channel = interaction.client.get_channel(MOD_CHANNEL_ID)
        if not mod_channel:
            await interaction.response.send_message("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –∑–∞—è–≤–æ–∫.", ephemeral=True)
            return
        embed = discord.Embed(
            title="–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è",
            color=discord.Color.blurple(),
            timestamp=datetime.utcnow()
        )
        embed.set_author(name=interaction.user, icon_url=interaction.user.display_avatar.url)
        embed.add_field(name="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á", value=f"{interaction.user.mention} ({interaction.user.id})", inline=False)
        embed.add_field(name="–í—ñ–¥–ø–æ–≤—ñ–¥—å", value=self.reason.value, inline=False)
        view = JoinRequestView(user_id=interaction.user.id, reason=self.reason.value)
        await mod_channel.send(embed=embed, view=view)
        await interaction.response.send_message("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º. –û—á—ñ–∫—É–π—Ç–µ —Ä—ñ—à–µ–Ω–Ω—è.", ephemeral=True)

class JoinRequestView(View):
    def __init__(self, user_id, reason):
        super().__init__(timeout=None)
        self.user_id = user_id
        self.reason = reason
    @discord.ui.button(label="–°—Ö–≤–∞–ª–∏—Ç–∏", style=discord.ButtonStyle.success)
    async def approve(self, interaction: discord.Interaction, button: Button):
        user = interaction.client.get_user(self.user_id)
        if not user:
            await interaction.response.send_message("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", ephemeral=True)
            return
        try:
            await user.send(f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å—Ö–≤–∞–ª–µ–Ω–∞! –û—Å—å –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è: {GUILD_INVITE_LINK}")
            await interaction.response.send_message("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ –ø—Ä–æ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è.", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ DM: {e}", ephemeral=True)
        self.disable_all_items()
        await interaction.message.edit(view=self)
    @discord.ui.button(label="–°–∫–∞—Å—É–≤–∞—Ç–∏", style=discord.ButtonStyle.danger)
    async def deny(self, interaction: discord.Interaction, button: Button):
        user = interaction.client.get_user(self.user_id)
        if user:
            try:
                await user.send("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –±—É–ª–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.")
            except:
                pass
        await interaction.response.send_message("–ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", ephemeral=True)
        self.disable_all_items()
        await interaction.message.edit(view=self)

@bot.tree.command(name="request_join", description="–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞")
async def request_join(interaction: discord.Interaction):
    await interaction.response.send_modal(JoinRequestModal())

# ========== WoT NEWS AUTOPOST ========== 
wot_news_settings = {}  # guild_id: channel_id
wot_news_last_url = {}  # guild_id: last_news_url

WOT_RSS_URL = "https://worldoftanks.eu/uk/rss/news/"

@bot.tree.command(name="setup_wot_news", description="–í–∫–∞–∑–∞—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –Ω–æ–≤–∏–Ω World of Tanks")
@app_commands.describe(channel="–ö–∞–Ω–∞–ª –¥–ª—è –Ω–æ–≤–∏–Ω")
async def setup_wot_news(interaction: discord.Interaction, channel: discord.TextChannel):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤", ephemeral=True)
        return
    wot_news_settings[str(interaction.guild.id)] = channel.id
    await interaction.response.send_message(f"‚úÖ –ö–∞–Ω–∞–ª –¥–ª—è WoT –Ω–æ–≤–∏–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {channel.mention}", ephemeral=True)

async def fetch_wot_news():
    feed = feedparser.parse(WOT_RSS_URL)
    news = []
    for entry in feed.entries:
        news.append({
            'title': entry.title,
            'link': entry.link,
            'summary': entry.summary,
            'published': entry.published if 'published' in entry else '',
            'image': entry.media_content[0]['url'] if 'media_content' in entry and entry.media_content else None
        })
    return news

# WoT –æ—Ñ—ñ—Ü—ñ–π–Ω—ñ –Ω–æ–≤–∏–Ω–∏
@tasks.loop(minutes=2)
async def wot_official_news_task():
    for guild in bot.guilds:
        guild_id = str(guild.id)
        if guild_id not in wot_news_settings:
            continue
        channel = guild.get_channel(wot_news_settings[guild_id])
        if not channel:
            continue
        try:
            news = await fetch_wot_news()
            if not news:
                continue
            last_url = wot_news_last_url.get(guild_id)
            if not last_url:
                wot_news_last_url[guild_id] = news[0]['link']
                continue
            new_entries = []
            for entry in news:
                if entry['link'] == last_url:
                    break
                new_entries.append(entry)
            for entry in reversed(new_entries):
                embed = discord.Embed(
                    title=entry['title'],
                    url=entry['link'],
                    description=clean_html(entry['summary']),
                    color=discord.Color.orange()
                )
                embed.set_footer(text="World of Tanks | –û—Ñ—ñ—Ü—ñ–π–Ω–∞ –Ω–æ–≤–∏–Ω–∞")
                await channel.send(embed=embed)
                wot_news_last_url[guild_id] = entry['link']
        except Exception as e:
            print(f"[WoT Official News] Error for guild {guild_id}: {e}")

# WoT –∞–≤—Ç–æ–ø–æ—Å—Ç
@tasks.loop(minutes=60)
async def wot_news_autopost():
    await asyncio.sleep(random.randint(0, 7200))
    for guild in bot.guilds:
        guild_id = str(guild.id)
        if guild_id not in wot_news_settings:
            continue
        channel = guild.get_channel(wot_news_settings[guild_id])
        if not channel:
            continue
        try:
            news = await fetch_wot_news()
            if not news:
                continue
            last_url = wot_news_last_url.get(guild_id)
            if not last_url:
                wot_news_last_url[guild_id] = news[0]['link']
                continue
            new_entries = []
            for entry in news:
                if entry['link'] == last_url:
                    break
                new_entries.append(entry)
            for entry in reversed(new_entries):
                embed = discord.Embed(
                    title=entry['title'],
                    url=entry['link'],
                    description=clean_html(entry['summary']),
                    color=discord.Color.orange()
                )
                embed.set_footer(text="World of Tanks | –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω")
                await channel.send(embed=embed)
                wot_news_last_url[guild_id] = entry['link']
                break  # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ª–∏—à–µ –æ–¥–Ω—É –Ω–æ–≤–∏–Ω—É –∑–∞ —Ü–∏–∫–ª
        except Exception as e:
            print(f"[WoT News] Error for guild {guild_id}: {e}")

# WoT –∑–æ–≤–Ω—ñ—à–Ω—ñ –Ω–æ–≤–∏–Ω–∏ (Google News, YouTube, WoT Express)
@tasks.loop(minutes=15)
async def wot_external_news_task():
    for guild in bot.guilds:
        guild_id = str(guild.id)
        if guild_id not in wot_news_settings:
            continue
        channel = guild.get_channel(wot_news_settings[guild_id])
        if not channel:
            continue
        # Google News
        try:
            news = await fetch_rss_news(GOOGLE_NEWS_RSS)
            last_urls = wot_external_news_last.setdefault(guild_id, set())
            if not news:
                continue
            if not last_urls:
                last_urls.add(news[0]['link'])
                continue
            new_entries = []
            for entry in news:
                if entry['link'] in last_urls:
                    break
                new_entries.append(entry)
            for entry in reversed(new_entries):
                embed = discord.Embed(
                    title=entry['title'],
                    url=entry['link'],
                    description=clean_html(entry['summary']),
                    color=discord.Color.blue(),
                    timestamp=datetime.utcnow()
                )
                embed.set_footer(text="World of Tanks | –ù–æ–≤–∏–Ω–∞ –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
                await channel.send(embed=embed)
                last_urls.add(entry['link'])
        except Exception as e:
            print(f"[Google News] Error: {e}")
        # YouTube
        try:
            news = await fetch_rss_news(YOUTUBE_WOT_RSS)
            last_urls = wot_external_news_last.setdefault(guild_id, set())
            if not news:
                continue
            if not last_urls:
                last_urls.add(news[0]['link'])
                continue
            new_entries = []
            for entry in news:
                if entry['link'] in last_urls:
                    break
                new_entries.append(entry)
            for entry in reversed(new_entries):
                embed = discord.Embed(
                    title=entry['title'],
                    url=entry['link'],
                    description=clean_html(entry['summary']),
                    color=discord.Color.blue(),
                    timestamp=datetime.utcnow()
                )
                embed.set_footer(text="World of Tanks | –ù–æ–≤–∏–Ω–∞ –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
                await channel.send(embed=embed)
                last_urls.add(entry['link'])
        except Exception as e:
            print(f"[YouTube] Error: {e}")
        # WoT Express
        try:
            news = await fetch_rss_news(WOTEXPRESS_RSS)
            last_urls = wot_external_news_last.setdefault(guild_id, set())
            if not news:
                continue
            if not last_urls:
                last_urls.add(news[0]['link'])
                continue
            new_entries = []
            for entry in news:
                if entry['link'] in last_urls:
                    break
                new_entries.append(entry)
            for entry in reversed(new_entries):
                embed = discord.Embed(
                    title=entry['title'],
                    url=entry['link'],
                    description=clean_html(entry['summary']),
                    color=discord.Color.blue(),
                    timestamp=datetime.utcnow()
                )
                embed.set_footer(text="World of Tanks | –ù–æ–≤–∏–Ω–∞ –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
                await channel.send(embed=embed)
                last_urls.add(entry['link'])
        except Exception as e:
            print(f"[WoT Express] Error: {e}")

# Telegram Wotclue –Ω–æ–≤–∏–Ω–∏
@tasks.loop(minutes=10)
async def telegram_wotclue_news_task():
    for guild in bot.guilds:
        guild_id = str(guild.id)
        if guild_id not in wot_news_settings:
            continue
        channel = guild.get_channel(wot_news_settings[guild_id])
        if not channel:
            continue
        try:
            news = await fetch_telegram_wotclue_news()
            if not news:
                continue
            last_url = wotclue_news_last_url.get(guild_id)
            if not last_url:
                wotclue_news_last_url[guild_id] = news[0]['link']
                continue
            new_entries = []
            for entry in news:
                if entry['link'] == last_url:
                    break
                new_entries.append(entry)
            for entry in reversed(new_entries):
                embed = discord.Embed(
                    title=entry['title'],
                    url=entry['link'],
                    description=clean_html(entry['summary']),
                    color=discord.Color.teal(),
                    timestamp=datetime.utcnow()
                )
                embed.set_footer(text="Wotclue EU | Telegram")
                await channel.send(embed=embed)
                wotclue_news_last_url[guild_id] = entry['link']
        except Exception as e:
            print(f"[Telegram Wotclue News] Error: {e}")

# Telegram WoT UA –Ω–æ–≤–∏–Ω–∏
@tasks.loop(minutes=10)
async def telegram_wotua_news_task():
    for guild in bot.guilds:
        guild_id = str(guild.id)
        if guild_id not in wot_news_settings:
            continue
        channel = guild.get_channel(wot_news_settings[guild_id])
        if not channel:
            continue
        try:
            news = await fetch_rss_news(WOT_UA_TELEGRAM_RSS)
            if not news:
                continue
            last_url = wotua_news_last_url.get(guild_id)
            if not last_url:
                wotua_news_last_url[guild_id] = news[0]['link']
                continue
            new_entries = []
            for entry in news:
                if entry['link'] == last_url:
                    break
                new_entries.append(entry)
            for entry in reversed(new_entries):
                embed = discord.Embed(
                    title=entry['title'],
                    url=entry['link'],
                    description=clean_html(entry['summary']),
                    color=discord.Color.teal(),
                    timestamp=datetime.utcnow()
                )
                embed.set_footer(text="World of Tanks Ukraine | Telegram")
                await channel.send(embed=embed)
                wotua_news_last_url[guild_id] = entry['link']
        except Exception as e:
            print(f"[Telegram WoT UA News] Error: {e}")

# Telegram WOTCLUE EU –Ω–æ–≤–∏–Ω–∏
@tasks.loop(minutes=10)
async def telegram_wotclue_eu_news_task():
    for guild in bot.guilds:
        guild_id = str(guild.id)
        if guild_id not in wot_news_settings:
            continue
        channel = guild.get_channel(wot_news_settings[guild_id])
        if not channel:
            continue
        try:
            news = await fetch_rss_news(WOTCLUE_EU_TELEGRAM_RSS)
            if not news:
                continue
            last_url = wotclue_eu_news_last_url.get(guild_id)
            if not last_url:
                wotclue_eu_news_last_url[guild_id] = news[0]['link']
                continue
            new_entries = []
            for entry in news:
                if entry['link'] == last_url:
                    break
                new_entries.append(entry)
            for entry in reversed(new_entries):
                embed = discord.Embed(
                    title=entry['title'],
                    url=entry['link'],
                    description=clean_html(entry['summary']),
                    color=discord.Color.teal(),
                    timestamp=datetime.utcnow()
                )
                embed.set_footer(text="WOTCLUE EU | Telegram")
                await channel.send(embed=embed)
                wotclue_eu_news_last_url[guild_id] = entry['link']
        except Exception as e:
            print(f"[Telegram WOTCLUE EU News] Error: {e}")

# ========== –î–û–î–ê–¢–ö–û–í–Ü –ê–î–ú–Ü–ù-–ö–û–ú–ê–ù–î–ò ========== 

@bot.tree.command(name="purge", description="–í–∏–¥–∞–ª–∏—Ç–∏ N –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –∫–∞–Ω–∞–ª—ñ")
@app_commands.describe(amount="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
async def purge(interaction: discord.Interaction, amount: int):
    if not interaction.user.guild_permissions.manage_messages:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –Ω–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏", ephemeral=True)
    if amount < 1 or amount > 100:
        return await interaction.response.send_message("‚ùå –í–∫–∞–∂—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 100", ephemeral=True)
    try:
        await interaction.response.defer(ephemeral=True)
        deleted = await interaction.channel.purge(limit=amount)
        await interaction.followup.send(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ {len(deleted)} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å", ephemeral=True)
    except discord.errors.DiscordServerError:
        await interaction.followup.send("‚ùå Discord —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.", ephemeral=True)
    except discord.errors.NotFound:
        await interaction.followup.send("‚ùå –í–∑–∞—î–º–æ–¥—ñ—é –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", ephemeral=True)
    except Exception as e:
        await interaction.followup.send(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", ephemeral=True)

@bot.tree.command(name="mute", description="–í–∏–¥–∞—Ç–∏ –º—É—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")
@app_commands.describe(
    member="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π",
    reason="–ü—Ä–∏—á–∏–Ω–∞",
    days="–ù–∞ —Å–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤ (0 = –Ω–µ –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏)",
    hours="–ù–∞ —Å–∫—ñ–ª—å–∫–∏ –≥–æ–¥–∏–Ω (0 = –Ω–µ –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏)",
    minutes="–ù–∞ —Å–∫—ñ–ª—å–∫–∏ —Ö–≤–∏–ª–∏–Ω (0 = –Ω–µ –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏)"
)
async def mute(
    interaction: discord.Interaction,
    member: discord.Member,
    reason: str = "",
    days: int = 0,
    hours: int = 0,
    minutes: int = 0
):
    if not interaction.user.guild_permissions.moderate_members:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", ephemeral=True)
    BLOCKED_ROLE_ID = 1342610482623811664
    NORMAL_ROLE_ID = 1331255972303470603
    import pytz
    kyiv_tz = pytz.timezone('Europe/Kiev')
    try:
        until = None
        total_delta = timedelta(days=days, hours=hours, minutes=minutes)
        if total_delta.total_seconds() > 0:
            until = discord.utils.utcnow() + total_delta
        await member.edit(timed_out_until=until, reason=reason)
        # –§–æ—Ä–º—É—î–º–æ —Å—Ç—Ä–æ–∫—É —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
        duration_parts = []
        if days:
            duration_parts.append(f"{days} –¥–Ω.")
        if hours:
            duration_parts.append(f"{hours} –≥–æ–¥.")
        if minutes:
            duration_parts.append(f"{minutes} —Ö–≤.")
        duration_str = " ".join(duration_parts) if duration_parts else "–±–µ–∑—Å—Ç—Ä–æ–∫–æ–≤–æ"
        # –Ø–∫—â–æ –±–µ–∑—Å—Ç—Ä–æ–∫–æ–≤–æ, –∑–º—ñ–Ω—é—î–º–æ —Ä–æ–ª—ñ
        if total_delta.total_seconds() == 0:
            normal_role = interaction.guild.get_role(NORMAL_ROLE_ID)
            blocked_role = interaction.guild.get_role(BLOCKED_ROLE_ID)
            if normal_role and normal_role in member.roles:
                await member.remove_roles(normal_role, reason="–ë–µ–∑—Å—Ç—Ä–æ–∫–æ–≤–µ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è")
            if blocked_role and blocked_role not in member.roles:
                await member.add_roles(blocked_role, reason="–ë–µ–∑—Å—Ç—Ä–æ–∫–æ–≤–µ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è")
        await interaction.response.send_message(
            f"üîá {member.mention} —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ {duration_str}",
            ephemeral=True
        )
        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        try:
            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            moderator = interaction.user.mention
            server_name = interaction.guild.name
            if not reason:
                reason = "–ü–æ—Ä—É—à–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–æ–º UADRG"
            lines = [
                f"üëÆ‚Äç‚ôÇÔ∏è *–í–∞—Å –∑–∞–±–ª–æ–∫—É–≤–∞–≤:* ControlBot",
                f"üìù *–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è:* {reason}",
            ]
            if total_delta.total_seconds() == 0:
                lines.append(f"‚õî *–ê–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –±–µ–∑ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è (–Ω–∞–∑–∞–≤–∂–¥–∏)*")
            else:
                lines.append(f"‚è≥ *–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –±–ª–æ–∫—É–≤–∞–Ω–Ω—è:* {duration_str}")
                if until:
                    kyiv_time = until.astimezone(kyiv_tz)
                    lines.append(f"üìÖ *–ß–∞—Å —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è:* {kyiv_time.strftime('%d.%m.%Y %H:%M')} (–ö–∏—ó–≤)")
            lines.append(f"üåê *–°–µ—Ä–≤–µ—Ä:* {server_name}")
            msg = "\n".join(lines)
            await member.send(msg)
        except Exception:
            pass  # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ DM, —ñ–≥–Ω–æ—Ä—É—î–º–æ
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="unmute", description="–ó–Ω—è—Ç–∏ –º—É—Ç –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
@app_commands.describe(member="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–ª—è —Ä–æ–∑–º'—é—Ç—É")
async def unmute(interaction: discord.Interaction, member: discord.Member):
    if not interaction.user.guild_permissions.moderate_members:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", ephemeral=True)
    BLOCKED_ROLE_ID = 1342610482623811664
    NORMAL_ROLE_ID = 1331255972303470603
    try:
        await member.edit(timed_out_until=None)
        # –Ø–∫—â–æ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —î —Ä–æ–ª—å –±–ª–æ–∫—É–≤–∞–Ω–Ω—è, –∑–Ω—ñ–º–∞—î–º–æ —ó—ó —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–≤–∏—á–∞–π–Ω—É —Ä–æ–ª—å
        blocked_role = interaction.guild.get_role(BLOCKED_ROLE_ID)
        normal_role = interaction.guild.get_role(NORMAL_ROLE_ID)
        if blocked_role and blocked_role in member.roles:
            await member.remove_roles(blocked_role, reason="–ó–Ω—è—Ç—Ç—è –±–µ–∑—Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è")
        if normal_role and normal_role not in member.roles:
            await member.add_roles(normal_role, reason="–ó–Ω—è—Ç—Ç—è –±–µ–∑—Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è")
        await interaction.response.send_message(f"üîä {member.mention} —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="ban", description="–ó–∞–±–∞–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
@app_commands.describe(member="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–ª—è –±–∞–Ω—É", reason="–ü—Ä–∏—á–∏–Ω–∞")
async def ban(interaction: discord.Interaction, member: discord.Member, reason: str = ""): 
    if not interaction.user.guild_permissions.ban_members:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –Ω–∞ –±–∞–Ω", ephemeral=True)
    try:
        await member.ban(reason=reason)
        await interaction.response.send_message(f"‚õî {member.mention} –∑–∞–±–∞–Ω–µ–Ω–æ", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="unban", description="–†–æ–∑–±–∞–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID")
@app_commands.describe(user_id="ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ä–æ–∑–±–∞–Ω—É")
async def unban(interaction: discord.Interaction, user_id: int):
    if not interaction.user.guild_permissions.ban_members:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –Ω–∞ –±–∞–Ω", ephemeral=True)
    try:
        user = await bot.fetch_user(user_id)
        await interaction.guild.unban(user)
        await interaction.response.send_message(f"‚úÖ {user.mention} —Ä–æ–∑–±–∞–Ω–µ–Ω–æ", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="slowmode", description="–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–ª—å–Ω–∏–π —Ä–µ–∂–∏–º —É –∫–∞–Ω–∞–ª—ñ")
@app_commands.describe(seconds="–Ü–Ω—Ç–µ—Ä–≤–∞–ª —É —Å–µ–∫—É–Ω–¥–∞—Ö")
async def slowmode(interaction: discord.Interaction, seconds: int):
    if not interaction.user.guild_permissions.manage_channels:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –Ω–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏", ephemeral=True)
    try:
        await interaction.channel.edit(slowmode_delay=seconds)
        await interaction.response.send_message(f"üê¢ Slowmode: {seconds} —Å–µ–∫.", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="announce", description="–ó—Ä–æ–±–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —É –≤–∫–∞–∑–∞–Ω–æ–º—É –∫–∞–Ω–∞–ª—ñ")
@app_commands.describe(channel="–ö–∞–Ω–∞–ª –¥–ª—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è", message="–¢–µ–∫—Å—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è")
async def announce(interaction: discord.Interaction, channel: discord.TextChannel, message: str):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", ephemeral=True)
    try:
        await channel.send(f"üì¢ {message}")
        await interaction.response.send_message(f"‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É {channel.mention}", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="roleinfo", description="–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–æ–ª—å")
@app_commands.describe(role="–†–æ–ª—å")
async def roleinfo(interaction: discord.Interaction, role: discord.Role):
    embed = discord.Embed(title=f"–†–æ–ª—å: {role.name}", color=role.color, timestamp=datetime.utcnow())
    embed.add_field(name="ID", value=role.id, inline=True)
    embed.add_field(name="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", value=len(role.members), inline=True)
    embed.add_field(name="–ö–æ–ª—ñ—Ä", value=str(role.color), inline=True)
    embed.add_field(name="–ü–æ–∑–∏—Ü—ñ—è", value=role.position, inline=True)
    embed.add_field(name="–ó–≥–∞–¥–∫–∞", value=role.mention, inline=True)
    embed.add_field(name="–°—Ç–≤–æ—Ä–µ–Ω–æ", value=role.created_at.strftime('%d.%m.%Y %H:%M'), inline=True)
    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="add_role", description="–í–∏–¥–∞—Ç–∏ —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")
@app_commands.describe(member="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á", role="–†–æ–ª—å")
async def add_role(interaction: discord.Interaction, member: discord.Member, role: discord.Role):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", ephemeral=True)
    try:
        await member.add_roles(role)
        await interaction.response.send_message(f"‚úÖ {role.mention} –≤–∏–¥–∞–Ω–æ {member.mention}", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="remove_role", description="–ó–Ω—è—Ç–∏ —Ä–æ–ª—å –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
@app_commands.describe(member="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á", role="–†–æ–ª—å")
async def remove_role(interaction: discord.Interaction, member: discord.Member, role: discord.Role):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", ephemeral=True)
    try:
        await member.remove_roles(role)
        await interaction.response.send_message(f"‚úÖ {role.mention} –∑–Ω—è—Ç–æ –∑ {member.mention}", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="lock_channel", description="–ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è @everyone")
async def lock_channel(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.manage_channels:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –Ω–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏", ephemeral=True)
    try:
        overwrite = interaction.channel.overwrites_for(interaction.guild.default_role)
        overwrite.send_messages = False
        await interaction.channel.set_permissions(interaction.guild.default_role, overwrite=overwrite)
        await interaction.response.send_message("üîí –ö–∞–Ω–∞–ª –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –¥–ª—è @everyone", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="unlock_channel", description="–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è @everyone")
async def unlock_channel(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.manage_channels:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –Ω–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏", ephemeral=True)
    try:
        overwrite = interaction.channel.overwrites_for(interaction.guild.default_role)
        overwrite.send_messages = True
        await interaction.channel.set_permissions(interaction.guild.default_role, overwrite=overwrite)
        await interaction.response.send_message("üîì –ö–∞–Ω–∞–ª —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ –¥–ª—è @everyone", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="clear_reactions", description="–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Ä–µ–∞–∫—Ü—ñ—ó –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
@app_commands.describe(message_id="ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
async def clear_reactions(interaction: discord.Interaction, message_id: int):
    if not interaction.user.guild_permissions.manage_messages:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –Ω–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏", ephemeral=True)
    try:
        msg = await interaction.channel.fetch_message(message_id)
        await msg.clear_reactions()
        await interaction.response.send_message("‚úÖ –†–µ–∞–∫—Ü—ñ—ó –æ—á–∏—â–µ–Ω–æ", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="list_mutes", description="–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–º'—é—á–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
async def list_mutes(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.moderate_members:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", ephemeral=True)
    import pytz
    kyiv_tz = pytz.timezone('Europe/Kiev')
    muted = [m for m in interaction.guild.members if m.timed_out_until and m.timed_out_until > datetime.now(timezone.utc)]
    if not muted:
        await interaction.response.send_message("–ù–µ–º–∞—î –∑–∞–º'—é—á–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", ephemeral=True)
        return
    msg = "\n".join([
        f"{m.mention} –¥–æ {m.timed_out_until.astimezone(kyiv_tz).strftime('%d.%m.%Y %H:%M')} (–ö–∏—ó–≤)"
        for m in muted
    ])
    await interaction.response.send_message(f"–ó–∞–º'—é—á–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:\n{msg}", ephemeral=True)

@bot.tree.command(name="list_bans", description="–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–±–∞–Ω–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
async def list_bans(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.ban_members:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –Ω–∞ –±–∞–Ω", ephemeral=True)
    bans = [ban async for ban in interaction.guild.bans()]
    if not bans:
        await interaction.response.send_message("–ù–µ–º–∞—î –∑–∞–±–∞–Ω–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", ephemeral=True)
        return
    msg = "\n".join([f"{ban.user} ({ban.user.id})" for ban in bans])
    await interaction.response.send_message(f"–ó–∞–±–∞–Ω–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:\n{msg}", ephemeral=True)

@bot.tree.command(name="change_nick", description="–ó–º—ñ–Ω–∏—Ç–∏ –Ω—ñ–∫–Ω–µ–π–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
@app_commands.describe(member="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á", nickname="–ù–æ–≤–∏–π –Ω—ñ–∫–Ω–µ–π–º")
async def change_nick(interaction: discord.Interaction, member: discord.Member, nickname: str):
    if not interaction.user.guild_permissions.manage_nicknames:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –Ω–∞ –∑–º—ñ–Ω—É –Ω—ñ–∫—ñ–≤", ephemeral=True)
    try:
        await member.edit(nick=nickname)
        await interaction.response.send_message(f"‚úÖ –ù—ñ–∫–Ω–µ–π–º {member.mention} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {nickname}", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="purge_user", description="–í–∏–¥–∞–ª–∏—Ç–∏ N –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —Ü—å–æ–º—É –∫–∞–Ω–∞–ª—ñ")
@app_commands.describe(member="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á", amount="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
async def purge_user(interaction: discord.Interaction, member: discord.Member, amount: int):
    if not interaction.user.guild_permissions.manage_messages:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –Ω–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏", ephemeral=True)
    if amount < 1 or amount > 100:
        return await interaction.response.send_message("‚ùå –í–∫–∞–∂—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 100", ephemeral=True)
    try:
        await interaction.response.defer(ephemeral=True)
        def is_user(m):
            return m.author.id == member.id
        deleted = await interaction.channel.purge(limit=amount, check=is_user)
        await interaction.followup.send(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ {len(deleted)} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ {member.mention}", ephemeral=True)
    except discord.errors.DiscordServerError:
        await interaction.followup.send("‚ùå Discord —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.", ephemeral=True)
    except discord.errors.NotFound:
        await interaction.followup.send("‚ùå –í–∑–∞—î–º–æ–¥—ñ—é –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", ephemeral=True)
    except Exception as e:
        await interaction.followup.send(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}", ephemeral=True)

# ========== –ó–ê–ü–£–°–ö ==========

TOKEN = os.getenv('DISCORD_TOKEN')
if not TOKEN:
    raise ValueError("–í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–æ–∫–µ–Ω Discord")

# –î–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –Ω–æ–≤–∏–Ω –∑—ñ —Å—Ç–æ—Ä–æ–Ω–Ω—ñ—Ö –¥–∂–µ—Ä–µ–ª
wot_external_news_last = {}  # guild_id: set(url)
external_news_queue = []  # [{'guild_id':..., 'entry':...}]

GOOGLE_NEWS_RSS = "https://news.google.com/rss/search?q=World+of+Tanks&hl=uk&gl=UA&ceid=UA:uk"
YOUTUBE_WOT_RSS = "https://www.youtube.com/feeds/videos.xml?channel_id=UCh554z2-7vIA-Mf9qAameoA"  # –û—Ñ—ñ—Ü—ñ–π–Ω–∏–π WoT Official
WOTEXPRESS_RSS = "https://wotexpress.info/rss/news/"
WOT_UA_TELEGRAM_RSS = "https://rsshub.app/telegram/channel/worldoftanksua_official"
WOTCLUE_EU_TELEGRAM_RSS = "https://rsshub.app/telegram/channel/Wotclue_eu"
wotclue_eu_news_last_url = {}  # guild_id: last_news_url

async def fetch_rss_news(url):
    feed = feedparser.parse(url)
    news = []
    for entry in feed.entries:
        news.append({
            'title': entry.title,
            'link': entry.link,
            'summary': entry.summary if 'summary' in entry else '',
            'published': entry.published if 'published' in entry else '',
            'image': entry.media_content[0]['url'] if 'media_content' in entry and entry.media_content else None
        })
    return news

# –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –Ω–æ–≤–∏–Ω –∑ —á–µ—Ä–≥–∏ –∑ —Ä–∞–Ω–¥–æ–º–Ω–æ—é –∑–∞—Ç—Ä–∏–º–∫–æ—é
@tasks.loop(minutes=10)
async def wot_external_news_publisher():
    if not external_news_queue:
        return
    item = external_news_queue.pop(0)
    guild_id = item['guild_id']
    entry = item['entry']
    channel_id = wot_news_settings.get(guild_id)
    if not channel_id:
        return
    for guild in bot.guilds:
        if str(guild.id) == guild_id:
            channel = guild.get_channel(channel_id)
            if channel:
                embed = discord.Embed(
                    title=entry['title'],
                    url=entry['link'],
                    description=clean_html(entry['summary']),
                    color=discord.Color.blue(),
                    timestamp=datetime.utcnow()
                )
                # –ù–ï –¥–æ–¥–∞—î–º–æ –ø–æ–ª—è –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏
                embed.set_footer(text="World of Tanks | –ù–æ–≤–∏–Ω–∞ –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
                # –†–∞–Ω–¥–æ–º–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—î—é
                delay = random.randint(3600, 10800)  # 1-3 –≥–æ–¥–∏–Ω–∏
                bot.loop.create_task(asyncio.sleep(delay))
                bot.loop.create_task(channel.send(embed=embed))
            break

def clean_html(raw_html):
    clean_text = re.sub('<.*?>', '', raw_html)
    return unescape(clean_text).strip()

def extract_links(html):
    # –ü–æ—à—É–∫ —É—Å—ñ—Ö <a href="...">—Ç–µ–∫—Å—Ç</a>
    return re.findall(r'<a\s+href=[\'\"](.*?)[\'\"].*?>(.*?)<\/a>', html)

WG_API_KEY = "180fc971b4111ed71923f2135aa73b74"
CLAN_ID = 500310423
CLAN_ROLE_ID = 1331255972303470603

async def check_nickname_in_clan(nickname: str) -> bool:
    async with aiohttp.ClientSession() as session:
        # 1. –ó–Ω–∞–π—Ç–∏ account_id –ø–æ –Ω—ñ–∫–Ω–µ–π–º—É
        url = f"https://api.worldoftanks.eu/wot/account/list/?application_id={WG_API_KEY}&search={nickname}"
        async with session.get(url) as resp:
            data = await resp.json()
            if not data['data']:
                return False
            account_id = data['data'][0]['account_id']
        # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–ª–∞–Ω
        url = f"https://api.worldoftanks.eu/wot/clans/accountinfo/?application_id={WG_API_KEY}&account_id={account_id}"
        async with session.get(url) as resp:
            data = await resp.json()
            clan = data['data'][str(account_id)]['clan_id']
            return clan == CLAN_ID

from discord.ui import Modal, TextInput

class NicknameModal(Modal, title="–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π WoT –Ω—ñ–∫–Ω–µ–π–º"):
    nickname = TextInput(label="–Ü–≥—Ä–æ–≤–∏–π –Ω—ñ–∫–Ω–µ–π–º", required=True, max_length=24)

    def __init__(self, member, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.member = member

    async def on_submit(self, interaction):
        nickname = self.nickname.value.strip()
        in_clan = await check_nickname_in_clan(nickname)
        if in_clan:
            role = interaction.guild.get_role(CLAN_ROLE_ID)
            if role:
                await self.member.add_roles(role)
                await interaction.response.send_message("‚úÖ –í–∏ –¥–æ–¥–∞–Ω—ñ –¥–æ –∫–ª–∞–Ω—É!", ephemeral=True)
            else:
                await interaction.response.send_message("‚ùå –†–æ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!", ephemeral=True)
        else:
            try:
                await self.member.send("‚ùå –í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ —É –∫–ª–∞–Ω—ñ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –æ—Ñ—ñ—Ü–µ—Ä—ñ–≤ –∫–ª–∞–Ω—É.")
            except:
                pass
            await interaction.response.send_message("‚ùå –í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ —É –∫–ª–∞–Ω—ñ.", ephemeral=True)

# --- –î–æ–¥–∞—î–º–æ –≤–∏–∫–ª–∏–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –ø—ñ—Å–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è —á–µ—Ä–µ–∑ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è ---

@bot.event
async def on_member_join(member):
    if member.bot:
        return
    
    guild = member.guild
    assigned_role = None
    
    try:
        current_invites = await guild.invites()
        used_invite = None
        for invite in current_invites:
            cached_uses = invite_cache.get(guild.id, {}).get(invite.code, 0)
            if invite.uses > cached_uses:
                used_invite = invite
                break
        
        if used_invite:
            await update_invite_cache(guild)
            guild_roles = invite_roles.get(str(guild.id), {})
            role_id = guild_roles.get(used_invite.code)
            
            if role_id:
                role = guild.get_role(role_id)
                if role:
                    try:
                        await member.add_roles(role)
                        assigned_role = role
                        print(f"–ù–∞–¥–∞–Ω–æ —Ä–æ–ª—å {role.name} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {member} –∑–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è {used_invite.code}")
                    except discord.Forbidden:
                        print(f"–ù–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É –Ω–∞–¥–∞–≤–∞—Ç–∏ —Ä–æ–ª—å {role.name}")
                    except Exception as e:
                        print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥–∞–Ω–Ω—è —Ä–æ–ª—ñ: {e}")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞: {e}")
    
    # –û–±—Ä–æ–±–∫–∞ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if str(guild.id) in welcome_messages:
        channel_id = welcome_messages[str(guild.id)]["channel_id"]
        channel = guild.get_channel(channel_id)
        if channel:
            try:
                inviter = "–ù–µ–≤—ñ–¥–æ–º–æ"
                if used_invite and used_invite.inviter:
                    inviter = used_invite.inviter.mention
                role_info = "–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ"
                if assigned_role:
                    role_info = assigned_role.mention
                kyiv_time = datetime.now(pytz.timezone('Europe/Kiev'))
                embed = discord.Embed(
                    title=f"–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æüëã–Ω–∞ —Å–µ—Ä–≤–µ—Ä, {member.display_name}!",
                    color=discord.Color.green(),
                    timestamp=kyiv_time
                )
                embed.set_thumbnail(url=member.display_avatar.url)
                embed.add_field(
                    name="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á",
                    value=f"{member.mention}\n{member.display_name}",
                    inline=True
                )
                embed.add_field(
                    name="–ó–∞–ø—Ä–æ—Å–∏–≤",
                    value=inviter,
                    inline=True
                )
                embed.add_field(
                    name="–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å",
                    value=role_info,
                    inline=False
                )
                embed.add_field(
                    name="–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤ Discord",
                    value=member.created_at.strftime("%d.%m.%Y"),
                    inline=False
                )
                embed.set_footer(
                    text=f"{guild.name} | –ü—Ä–∏—î–¥–Ω–∞–≤—Å—è: {kyiv_time.strftime('%d.%m.%Y –æ %H:%M')}",
                    icon_url=guild.icon.url if guild.icon else None
                )
                await channel.send(embed=embed)
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è: {e}")

@bot.event
async def on_invite_create(invite):
    await update_invite_cache(invite.guild)

@bot.event
async def on_invite_delete(invite):
    await update_invite_cache(invite.guild)

@bot.event
async def on_ready():
    print(f'–ë–æ—Ç {bot.user} –æ–Ω–ª–∞–π–Ω!')
    kyiv_tz = pytz.timezone('Europe/Kiev')
    now = datetime.now(kyiv_tz)
    print(f"–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å (–ö–∏—ó–≤): {now}")
    for guild in bot.guilds:
        await update_invite_cache(guild)
        guild_id = str(guild.id)
        # WoT –æ—Ñ—ñ—Ü—ñ–π–Ω—ñ –Ω–æ–≤–∏–Ω–∏
        if guild_id in wot_news_settings:
            news = await fetch_wot_news()
            if news:
                wot_news_last_url[guild_id] = news[0]['link']
        # Telegram Wotclue
        if guild_id in wot_news_settings:
            news = await fetch_telegram_wotclue_news()
            if news:
                wotclue_news_last_url[guild_id] = news[0]['link']
        # Google News
        if guild_id in wot_news_settings:
            news = await fetch_rss_news(GOOGLE_NEWS_RSS)
            if news:
                wot_external_news_last.setdefault(guild_id, set()).add(news[0]['link'])
        # YouTube
        if guild_id in wot_news_settings:
            news = await fetch_rss_news(YOUTUBE_WOT_RSS)
            if news:
                wot_external_news_last.setdefault(guild_id, set()).add(news[0]['link'])
        # WoT Express
        if guild_id in wot_news_settings:
            news = await fetch_rss_news(WOTEXPRESS_RSS)
            if news:
                wot_external_news_last.setdefault(guild_id, set()).add(news[0]['link'])
        # Telegram WoT UA
        if guild_id in wot_news_settings:
            news = await fetch_rss_news(WOT_UA_TELEGRAM_RSS)
            if news:
                wotua_news_last_url[guild_id] = news[0]['link']
        # Telegram WOTCLUE EU
        if guild_id in wot_news_settings:
            news = await fetch_rss_news(WOTCLUE_EU_TELEGRAM_RSS)
            if news:
                wotclue_eu_news_last_url[guild_id] = news[0]['link']
    try:
        synced = await bot.tree.sync()
        print(f"–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: {e}")
    check_voice_activity.start()
    update_voice_activity.start()
    wot_news_autopost.start()
    wot_official_news_task.start()
    wot_external_news_task.start()
    wot_external_news_publisher.start()
    telegram_wotclue_news_task.start()
    telegram_wotua_news_task.start()
    telegram_wotclue_eu_news_task.start()

if __name__ == '__main__':
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    bot.run(TOKEN) 
