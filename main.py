import discord
from discord import app_commands
from discord.ext import commands, tasks
import os
from datetime import datetime, timedelta
import asyncio
from collections import defaultdict
import json
import random
import aiohttp
from typing import Optional
import pytz
from discord.ui import View, Button, Modal, TextInput

intents = discord.Intents.default()
intents.members = True
intents.guilds = True
intents.message_content = True
intents.voice_states = True
intents.invites = True

bot = commands.Bot(command_prefix="!", intents=intents)

# –°–∏—Å—Ç–µ–º–∏ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
voice_time_tracker = {}
tracked_channels = {}
warning_sent = set()
voice_activity = defaultdict(timedelta)
last_activity_update = datetime.utcnow()

# –°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π –∑–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è–º–∏
invite_roles = {}
invite_cache = {}

# –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
welcome_messages = {}

def load_invite_data():
    try:
        with open('invite_roles.json', 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_invite_data():
    with open('invite_roles.json', 'w') as f:
        json.dump(invite_roles, f)

def load_welcome_data():
    try:
        with open('welcome_messages.json', 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_welcome_data():
    with open('welcome_messages.json', 'w') as f:
        json.dump(welcome_messages, f)

invite_roles = load_invite_data()
welcome_messages = load_welcome_data()

async def get_wg_api_data(endpoint: str, params: dict) -> Optional[dict]:
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ Wargaming API"""
    # params['application_id'] = WG_API_KEY  # –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Ä–∞—Å–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ —ñ –¥–æ–¥–∞–π—Ç–µ –∫–ª—é—á
    # async with aiohttp.ClientSession() as session:
    #     try:
    #         async with session.get(f"{WG_API_URL}{endpoint}", params=params) as resp:
    #             if resp.status == 200:
    #                 data = await resp.json()
    #                 return data.get('data') if 'data' in data else data
    #             print(f"–ü–æ–º–∏–ª–∫–∞ API: {resp.status} - {await resp.text()}")
    #     except Exception as e:
    #         print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ API: {e}")
    return None

async def update_invite_cache(guild):
    try:
        invites = await guild.invites()
        invite_cache[guild.id] = {invite.code: invite.uses for invite in invites}
    except discord.Forbidden:
        print(f"–ù–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É –Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥ –∑–∞–ø—Ä–æ—à–µ–Ω—å –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {guild.name}")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É –∑–∞–ø—Ä–æ—à–µ–Ω—å: {e}")

async def delete_after(message, minutes):
    if minutes <= 0: return
    await asyncio.sleep(minutes * 60)
    try: await message.delete()
    except: pass

@tasks.loop(minutes=1)
async def update_voice_activity():
    global last_activity_update
    now = datetime.utcnow()
    time_elapsed = now - last_activity_update
    last_activity_update = now
    
    for guild in bot.guilds:
        for voice_channel in guild.voice_channels:
            for member in voice_channel.members:
                if not member.bot:
                    voice_activity[member.id] += time_elapsed

@tasks.loop(minutes=1)
async def check_voice_activity():
    current_time = datetime.utcnow()
    for guild_id, data in tracked_channels.items():
        guild = bot.get_guild(guild_id)
        if not guild: continue
            
        voice_channel = guild.get_channel(data["voice_channel"])
        log_channel = guild.get_channel(data["log_channel"])
        if not voice_channel or not log_channel: continue
            
        for member in voice_channel.members:
            if member.bot: continue
                
            member_key = f"{guild_id}_{member.id}"
            
            if member_key not in voice_time_tracker:
                voice_time_tracker[member_key] = current_time
                warning_sent.discard(member_key)
                continue
                
            time_in_channel = current_time - voice_time_tracker[member_key]
            
            if time_in_channel > timedelta(minutes=10) and member_key not in warning_sent:
                try:
                    await member.send("‚ö†Ô∏è –í–∏ –≤ –∫–∞–Ω–∞–ª—ñ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤–∂–µ 10+ —Ö–≤–∏–ª–∏–Ω. ‚úÖ –ë—É–¥—å—Ç–µ –∞–∫—Ç–∏–≤–Ω—ñ, –∞–±–æ –í–∏ –±—É–¥–µ—Ç–µ –≤—ñ–¥—î–¥–Ω–∞–Ω—ñ!")
                    warning_sent.add(member_key)
                except: pass
            
            if time_in_channel > timedelta(minutes=15):
                try:
                    await member.move_to(None)
                    msg = await log_channel.send(f"üî¥ {member.mention} –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ")
                    bot.loop.create_task(delete_after(msg, data["delete_after"]))
                    del voice_time_tracker[member_key]
                    warning_sent.discard(member_key)
                except: pass

@bot.event
async def on_voice_state_update(member, before, after):
    if before.channel and before.channel.id in [data["voice_channel"] for data in tracked_channels.values()]:
        member_key = f"{member.guild.id}_{member.id}"
        if member_key in voice_time_tracker:
            del voice_time_tracker[member_key]
            warning_sent.discard(member_key)

@bot.event
async def on_member_join(member):
    if member.bot:
        return
    
    guild = member.guild
    assigned_role = None
    
    try:
        current_invites = await guild.invites()
        used_invite = None
        for invite in current_invites:
            cached_uses = invite_cache.get(guild.id, {}).get(invite.code, 0)
            if invite.uses > cached_uses:
                used_invite = invite
                break
        
        if used_invite:
            await update_invite_cache(guild)
            guild_roles = invite_roles.get(str(guild.id), {})
            role_id = guild_roles.get(used_invite.code)
            
            if role_id:
                role = guild.get_role(role_id)
                if role:
                    try:
                        await member.add_roles(role)
                        assigned_role = role
                        print(f"–ù–∞–¥–∞–Ω–æ —Ä–æ–ª—å {role.name} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {member} –∑–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è {used_invite.code}")
                    except discord.Forbidden:
                        print(f"–ù–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É –Ω–∞–¥–∞–≤–∞—Ç–∏ —Ä–æ–ª—å {role.name}")
                    except Exception as e:
                        print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥–∞–Ω–Ω—è —Ä–æ–ª—ñ: {e}")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞: {e}")
    
    # –û–±—Ä–æ–±–∫–∞ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if str(guild.id) in welcome_messages:
        channel_id = welcome_messages[str(guild.id)]["channel_id"]
        channel = guild.get_channel(channel_id)
        if channel:
            try:
                inviter = "–ù–µ–≤—ñ–¥–æ–º–æ"
                if used_invite and used_invite.inviter:
                    inviter = used_invite.inviter.mention
                role_info = "–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ"
                if assigned_role:
                    role_info = assigned_role.mention
                kyiv_time = datetime.now(pytz.timezone('Europe/Kiev'))
                embed = discord.Embed(
                    title=f"–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æüëã–Ω–∞ —Å–µ—Ä–≤–µ—Ä, {member.display_name}!",
                    color=discord.Color.green(),
                    timestamp=kyiv_time
                )
                embed.set_thumbnail(url=member.display_avatar.url)
                embed.add_field(
                    name="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á",
                    value=f"{member.mention}\n{member.display_name}",
                    inline=True
                )
                embed.add_field(
                    name="–ó–∞–ø—Ä–æ—Å–∏–≤",
                    value=inviter,
                    inline=True
                )
                embed.add_field(
                    name="–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å",
                    value=role_info,
                    inline=False
                )
                embed.add_field(
                    name="–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤ Discord",
                    value=member.created_at.strftime("%d.%m.%Y"),
                    inline=False
                )
                embed.set_footer(
                    text=f"{guild.name} | –ü—Ä–∏—î–¥–Ω–∞–≤—Å—è: {kyiv_time.strftime('%d.%m.%Y –æ %H:%M')}",
                    icon_url=guild.icon.url if guild.icon else None
                )
                await channel.send(embed=embed)
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è: {e}")

@bot.event
async def on_invite_create(invite):
    await update_invite_cache(invite.guild)

@bot.event
async def on_invite_delete(invite):
    await update_invite_cache(invite.guild)

@bot.event
async def on_ready():
    print(f'–ë–æ—Ç {bot.user} –æ–Ω–ª–∞–π–Ω!')
    kyiv_tz = pytz.timezone('Europe/Kiev')
    now = datetime.now(kyiv_tz)
    print(f"–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å (–ö–∏—ó–≤): {now}")
    for guild in bot.guilds:
        await update_invite_cache(guild)
    try:
        synced = await bot.tree.sync()
        print(f"–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: {e}")
    check_voice_activity.start()
    update_voice_activity.start()

# ========== –ö–û–ú–ê–ù–î–ò ==========

@bot.tree.command(name="assign_role_to_invite", description="–ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ —Ä–æ–ª—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è")
@app_commands.describe(
    invite="–ö–æ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è (–±–µ–∑ discord.gg/)",
    role="–†–æ–ª—å –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è"
)
async def assign_role_to_invite(interaction: discord.Interaction, invite: str, role: discord.Role):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", ephemeral=True)
    try:
        invites = await interaction.guild.invites()
        if not any(inv.code == invite for inv in invites):
            return await interaction.response.send_message("‚ùå –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", ephemeral=True)
        guild_id = str(interaction.guild.id)
        if guild_id not in invite_roles:
            invite_roles[guild_id] = {}
        invite_roles[guild_id][invite] = role.id
        save_invite_data()
        await update_invite_cache(interaction.guild)
        await interaction.response.send_message(
            f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ, —è–∫—ñ –ø—Ä–∏–π–¥—É—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è `{invite}`, –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º—É—Ç—å —Ä–æ–ª—å {role.mention}",
            ephemeral=True
        )
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}",
            ephemeral=True
        )

@bot.tree.command(name="track_voice", description="–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —É –≥–æ–ª–æ—Å–æ–≤–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö")
@app_commands.describe(
    voice_channel="–ì–æ–ª–æ—Å–æ–≤–∏–π –∫–∞–Ω–∞–ª –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è",
    log_channel="–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å",
    delete_after="–ß–µ—Ä–µ–∑ —Å–∫—ñ–ª—å–∫–∏ —Ö–≤–∏–ª–∏–Ω –≤–∏–¥–∞–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
)
async def track_voice(interaction: discord.Interaction, 
                     voice_channel: discord.VoiceChannel, 
                     log_channel: discord.TextChannel,
                     delete_after: int = 5):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤", ephemeral=True)
        return
    tracked_channels[interaction.guild_id] = {
        "voice_channel": voice_channel.id,
        "log_channel": log_channel.id,
        "delete_after": delete_after
    }
    await interaction.response.send_message(
        f"üîä –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–Ω—è {voice_channel.mention} –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ\n"
        f"üìù –õ–æ–≥—É–≤–∞–Ω–Ω—è —É {log_channel.mention}\n"
        f"‚è≥ –ê–≤—Ç–æ–≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ {delete_after} —Ö–≤",
        ephemeral=True
    )

@bot.tree.command(name="remove_default_only", description="–í–∏–¥–∞–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç—ñ–ª—å–∫–∏ –∑ @everyone")
async def remove_default_only(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤", ephemeral=True)
        return
    await interaction.response.defer(ephemeral=True)
    deleted = 0
    for member in interaction.guild.members:
        if not member.bot and len(member.roles) == 1:
            try:
                await member.kick(reason="–¢—ñ–ª—å–∫–∏ @everyone")
                deleted += 1
            except: pass
    await interaction.followup.send(f"–í–∏–¥–∞–ª–µ–Ω–æ {deleted} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", ephemeral=True)

@bot.tree.command(name="remove_by_role", description="–í–∏–¥–∞–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ä–æ–ª–ª—é")
@app_commands.describe(role="–†–æ–ª—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
async def remove_by_role(interaction: discord.Interaction, role: discord.Role):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤", ephemeral=True)
        return
    if role == interaction.guild.default_role:
        await interaction.response.send_message("–ù–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª—è—Ç–∏ –≤—Å—ñ—Ö", ephemeral=True)
        return
    await interaction.response.defer(ephemeral=True)
    deleted = 0
    for member in role.members:
        if not member.bot:
            try:
                await member.kick(reason=f"–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–ª—ñ {role.name}")
                deleted += 1
            except: pass
    await interaction.followup.send(f"–í–∏–¥–∞–ª–µ–Ω–æ {deleted} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ä–æ–ª–ª—é {role.name}", ephemeral=True)

@bot.tree.command(name="list_no_roles", description="–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–µ–∑ —Ä–æ–ª–µ–π")
async def list_no_roles(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤", ephemeral=True)
        return
    await interaction.response.defer(ephemeral=True)
    members = [f"{m.display_name} ({m.id})" for m in interaction.guild.members 
               if not m.bot and len(m.roles) == 1]
    if not members:
        await interaction.followup.send("–ù–µ–º–∞—î —Ç–∞–∫–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", ephemeral=True)
        return
    chunks = [members[i:i+20] for i in range(0, len(members), 20)]
    for i, chunk in enumerate(chunks):
        msg = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –±–µ–∑ —Ä–æ–ª–µ–π (—á–∞—Å—Ç–∏–Ω–∞ {i+1}):\n" + "\n".join(chunk)
        await interaction.followup.send(msg, ephemeral=True)

@bot.tree.command(name="show_role_users", description="–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ä–æ–ª–ª—é")
@app_commands.describe(role="–†–æ–ª—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É")
async def show_role_users(interaction: discord.Interaction, role: discord.Role):
    await interaction.response.defer(ephemeral=True)
    members = [f"{m.mention} ({m.display_name})" for m in role.members if not m.bot]
    if not members:
        await interaction.followup.send(f"–ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ä–æ–ª–ª—é {role.name}", ephemeral=True)
        return
    chunks = [members[i:i+15] for i in range(0, len(members), 15)]
    for i, chunk in enumerate(chunks):
        embed = discord.Embed(
            title=f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑ —Ä–æ–ª–ª—é {role.name} ({len(members)})",
            description="\n".join(chunk),
            color=role.color
        )
        await interaction.followup.send(embed=embed, ephemeral=True)

@bot.tree.command(name="send_embed", description="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ embed-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –≤–∫–∞–∑–∞–Ω–∏–π –∫–∞–Ω–∞–ª")
@app_commands.describe(
    channel="–¢–µ–∫—Å—Ç–æ–≤–∏–π –∫–∞–Ω–∞–ª –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è",
    title="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
    description="–û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ \\n –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞)",
    color="–ö–æ–ª—ñ—Ä —Ä–∞–º–∫–∏ (–æ–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É)",
    thumbnail="–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª—É (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)",
    image="–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)"
)
@app_commands.choices(color=[
    app_commands.Choice(name="üîµ –°–∏–Ω—ñ–π", value="blue"),
    app_commands.Choice(name="üü¢ –ó–µ–ª–µ–Ω–∏–π", value="green"),
    app_commands.Choice(name="üî¥ –ß–µ—Ä–≤–æ–Ω–∏–π", value="red"),
    app_commands.Choice(name="üü° –ñ–æ–≤—Ç–∏–π", value="yellow"),
    app_commands.Choice(name="üü£ –§—ñ–æ–ª–µ—Ç–æ–≤–∏–π", value="purple"),
    app_commands.Choice(name="üü† –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π", value="orange"),
    app_commands.Choice(name="üåà –í–∏–ø–∞–¥–∫–æ–≤–∏–π", value="random")
])
async def send_embed(
    interaction: discord.Interaction,
    channel: discord.TextChannel,
    title: str,
    description: str,
    color: app_commands.Choice[str],
    thumbnail: discord.Attachment = None,
    image: discord.Attachment = None
):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º", ephemeral=True)
    color_map = {
        "blue": discord.Color.blue(),
        "green": discord.Color.green(),
        "red": discord.Color.red(),
        "yellow": discord.Color.gold(),
        "purple": discord.Color.purple(),
        "orange": discord.Color.orange(),
        "random": discord.Color.random()
    }
    selected_color = color_map.get(color.value, discord.Color.blue())
    embed = discord.Embed(
        title=title,
        description=description.replace('\\n', '\n'),
        color=selected_color,
        timestamp=datetime.utcnow()
    )
    if thumbnail and thumbnail.content_type.startswith('image/'):
        embed.set_thumbnail(url=thumbnail.url)
    if image and image.content_type.startswith('image/'):
        embed.set_image(url=image.url)
    try:
        await channel.send(embed=embed)
        await interaction.response.send_message(
            f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–æ {channel.mention}",
            ephemeral=True
        )
    except discord.Forbidden:
        await interaction.response.send_message(
            "‚ùå –ë–æ—Ç –Ω–µ –º–∞—î –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É —Ü–µ–π –∫–∞–Ω–∞–ª",
            ephemeral=True
        )
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}",
            ephemeral=True
        )

@bot.tree.command(name="setup_welcome", description="–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
@app_commands.describe(
    channel="–ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"
)
async def setup_welcome(interaction: discord.Interaction, channel: discord.TextChannel):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", ephemeral=True)
    welcome_messages[str(interaction.guild.id)] = {
        "channel_id": channel.id
    }
    save_welcome_data()
    await interaction.response.send_message(
        f"‚úÖ –ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥—É—Ç—å –Ω–∞–¥—Å–∏–ª–∞—Ç–∏—Å—è —É –∫–∞–Ω–∞–ª {channel.mention}\n"
        f"–¢–µ–ø–µ—Ä –ø—Ä–∏ –≤—Ö–æ–¥—ñ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞ –±—É–¥–µ –ø–æ–∫–∞–∑–∞–Ω–æ:\n"
        f"- –ê–≤–∞—Ç–∞—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
        f"- –Ü–º'—è —Ç–∞ –º—ñ—Ç–∫—É\n"
        f"- –•—Ç–æ –∑–∞–ø—Ä–æ—Å–∏–≤\n"
        f"- –ü—Ä–∏–∑–Ω–∞—á–µ–Ω—É —Ä–æ–ª—å\n"
        f"- –î–∞—Ç—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤ Discord\n"
        f"- –ß–∞—Å –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞",
        ephemeral=True
    )

@bot.tree.command(name="disable_welcome", description="–í–∏–º–∫–Ω—É—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
async def disable_welcome(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", ephemeral=True)
    if str(interaction.guild.id) in welcome_messages:
        welcome_messages.pop(str(interaction.guild.id))
        save_welcome_data()
    await interaction.response.send_message(
        "‚úÖ –ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ",
        ephemeral=True
    )

# ========== –ó–ê–Ø–í–ö–ê –ù–ê –ü–†–ò–Ñ–î–ù–ê–ù–ù–Ø ==========

MOD_CHANNEL_ID = 1234567890  # <-- –í–∫–∞–∂—ñ—Ç—å ID –∫–∞–Ω–∞–ª—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –∑–∞—è–≤–æ–∫
GUILD_INVITE_LINK = "https://discord.gg/yourinvite"  # <-- –í–∫–∞–∂—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è

class JoinRequestModal(Modal, title="–ó–∞–ø–∏—Ç –Ω–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è"):
    reason = TextInput(label="–ß–æ–º—É –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è?", style=discord.TextStyle.paragraph, required=True, max_length=300)
    async def on_submit(self, interaction: discord.Interaction):
        mod_channel = interaction.client.get_channel(MOD_CHANNEL_ID)
        if not mod_channel:
            await interaction.response.send_message("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –∑–∞—è–≤–æ–∫.", ephemeral=True)
            return
        embed = discord.Embed(
            title="–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è",
            color=discord.Color.blurple(),
            timestamp=datetime.utcnow()
        )
        embed.set_author(name=interaction.user, icon_url=interaction.user.display_avatar.url)
        embed.add_field(name="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á", value=f"{interaction.user.mention} ({interaction.user.id})", inline=False)
        embed.add_field(name="–í—ñ–¥–ø–æ–≤—ñ–¥—å", value=self.reason.value, inline=False)
        view = JoinRequestView(user_id=interaction.user.id, reason=self.reason.value)
        await mod_channel.send(embed=embed, view=view)
        await interaction.response.send_message("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º. –û—á—ñ–∫—É–π—Ç–µ —Ä—ñ—à–µ–Ω–Ω—è.", ephemeral=True)

class JoinRequestView(View):
    def __init__(self, user_id, reason):
        super().__init__(timeout=None)
        self.user_id = user_id
        self.reason = reason
    @discord.ui.button(label="–°—Ö–≤–∞–ª–∏—Ç–∏", style=discord.ButtonStyle.success)
    async def approve(self, interaction: discord.Interaction, button: Button):
        user = interaction.client.get_user(self.user_id)
        if not user:
            await interaction.response.send_message("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", ephemeral=True)
            return
        try:
            await user.send(f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å—Ö–≤–∞–ª–µ–Ω–∞! –û—Å—å –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è: {GUILD_INVITE_LINK}")
            await interaction.response.send_message("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ –ø—Ä–æ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è.", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ DM: {e}", ephemeral=True)
        self.disable_all_items()
        await interaction.message.edit(view=self)
    @discord.ui.button(label="–°–∫–∞—Å—É–≤–∞—Ç–∏", style=discord.ButtonStyle.danger)
    async def deny(self, interaction: discord.Interaction, button: Button):
        user = interaction.client.get_user(self.user_id)
        if user:
            try:
                await user.send("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –±—É–ª–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.")
            except:
                pass
        await interaction.response.send_message("–ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", ephemeral=True)
        self.disable_all_items()
        await interaction.message.edit(view=self)

@bot.tree.command(name="request_join", description="–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞")
async def request_join(interaction: discord.Interaction):
    await interaction.response.send_modal(JoinRequestModal())

# ========== –î–û–î–ê–¢–ö–û–í–Ü –ê–î–ú–Ü–ù-–ö–û–ú–ê–ù–î–ò ========== 

@bot.tree.command(name="purge", description="–í–∏–¥–∞–ª–∏—Ç–∏ N –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –∫–∞–Ω–∞–ª—ñ")
@app_commands.describe(amount="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
async def purge(interaction: discord.Interaction, amount: int):
    if not interaction.user.guild_permissions.manage_messages:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –Ω–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏", ephemeral=True)
    if amount < 1 or amount > 100:
        return await interaction.response.send_message("‚ùå –í–∫–∞–∂—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 100", ephemeral=True)
    deleted = await interaction.channel.purge(limit=amount)
    await interaction.response.send_message(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ {len(deleted)} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å", ephemeral=True)

@bot.tree.command(name="mute", description="–í–∏–¥–∞—Ç–∏ –º—É—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")
@app_commands.describe(member="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–ª—è –º—é—Ç—É", reason="–ü—Ä–∏—á–∏–Ω–∞", minutes="–ù–∞ —Å–∫—ñ–ª—å–∫–∏ —Ö–≤–∏–ª–∏–Ω (0 = –±–µ–∑—Å—Ç—Ä–æ–∫–æ–≤–æ)")
async def mute(interaction: discord.Interaction, member: discord.Member, reason: str = "", minutes: int = 0):
    if not interaction.user.guild_permissions.moderate_members:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", ephemeral=True)
    try:
        until = None
        if minutes > 0:
            until = discord.utils.utcnow() + timedelta(minutes=minutes)
        await member.edit(timeout=until, reason=reason)
        await interaction.response.send_message(f"üîá {member.mention} –∑–∞–º'—é—á–µ–Ω–æ {'–Ω–∞ ' + str(minutes) + ' —Ö–≤.' if minutes else '–±–µ–∑—Å—Ç—Ä–æ–∫–æ–≤–æ'}", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="unmute", description="–ó–Ω—è—Ç–∏ –º—É—Ç –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
@app_commands.describe(member="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–ª—è —Ä–æ–∑–º'—é—Ç—É")
async def unmute(interaction: discord.Interaction, member: discord.Member):
    if not interaction.user.guild_permissions.moderate_members:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", ephemeral=True)
    try:
        await member.edit(timeout=None)
        await interaction.response.send_message(f"üîä {member.mention} —Ä–æ–∑–º'—é—á–µ–Ω–æ", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="ban", description="–ó–∞–±–∞–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
@app_commands.describe(member="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–ª—è –±–∞–Ω—É", reason="–ü—Ä–∏—á–∏–Ω–∞")
async def ban(interaction: discord.Interaction, member: discord.Member, reason: str = ""): 
    if not interaction.user.guild_permissions.ban_members:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –Ω–∞ –±–∞–Ω", ephemeral=True)
    try:
        await member.ban(reason=reason)
        await interaction.response.send_message(f"‚õî {member.mention} –∑–∞–±–∞–Ω–µ–Ω–æ", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="unban", description="–†–æ–∑–±–∞–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID")
@app_commands.describe(user_id="ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ä–æ–∑–±–∞–Ω—É")
async def unban(interaction: discord.Interaction, user_id: int):
    if not interaction.user.guild_permissions.ban_members:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –Ω–∞ –±–∞–Ω", ephemeral=True)
    try:
        user = await bot.fetch_user(user_id)
        await interaction.guild.unban(user)
        await interaction.response.send_message(f"‚úÖ {user.mention} —Ä–æ–∑–±–∞–Ω–µ–Ω–æ", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="slowmode", description="–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–ª—å–Ω–∏–π —Ä–µ–∂–∏–º —É –∫–∞–Ω–∞–ª—ñ")
@app_commands.describe(seconds="–Ü–Ω—Ç–µ—Ä–≤–∞–ª —É —Å–µ–∫—É–Ω–¥–∞—Ö")
async def slowmode(interaction: discord.Interaction, seconds: int):
    if not interaction.user.guild_permissions.manage_channels:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –Ω–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–∞–º–∏", ephemeral=True)
    try:
        await interaction.channel.edit(slowmode_delay=seconds)
        await interaction.response.send_message(f"üê¢ Slowmode: {seconds} —Å–µ–∫.", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="announce", description="–ó—Ä–æ–±–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —É –≤–∫–∞–∑–∞–Ω–æ–º—É –∫–∞–Ω–∞–ª—ñ")
@app_commands.describe(channel="–ö–∞–Ω–∞–ª –¥–ª—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è", message="–¢–µ–∫—Å—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è")
async def announce(interaction: discord.Interaction, channel: discord.TextChannel, message: str):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", ephemeral=True)
    try:
        await channel.send(f"üì¢ {message}")
        await interaction.response.send_message(f"‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É {channel.mention}", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="userinfo", description="–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
@app_commands.describe(member="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")
async def userinfo(interaction: discord.Interaction, member: discord.Member = None):
    member = member or interaction.user
    embed = discord.Embed(title=f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ {member}", color=member.color, timestamp=datetime.utcnow())
    embed.set_thumbnail(url=member.display_avatar.url)
    embed.add_field(name="ID", value=member.id, inline=True)
    embed.add_field(name="–Ü–º'—è", value=member.display_name, inline=True)
    embed.add_field(name="–ó–≥–∞–¥–∫–∞", value=member.mention, inline=True)
    embed.add_field(name="–†–æ–ª—ñ", value=", ".join([r.mention for r in member.roles if r != member.guild.default_role]), inline=False)
    embed.add_field(name="–î–∞—Ç–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è", value=member.joined_at.strftime('%d.%m.%Y %H:%M'), inline=True)
    embed.add_field(name="–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó", value=member.created_at.strftime('%d.%m.%Y %H:%M'), inline=True)
    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="serverinfo", description="–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Ä–≤–µ—Ä")
async def serverinfo(interaction: discord.Interaction):
    guild = interaction.guild
    embed = discord.Embed(title=f"–°–µ—Ä–≤–µ—Ä: {guild.name}", color=discord.Color.blue(), timestamp=datetime.utcnow())
    embed.set_thumbnail(url=guild.icon.url if guild.icon else discord.Embed.Empty)
    embed.add_field(name="ID", value=guild.id, inline=True)
    embed.add_field(name="–í–ª–∞—Å–Ω–∏–∫", value=guild.owner.mention, inline=True)
    embed.add_field(name="–£—á–∞—Å–Ω–∏–∫—ñ–≤", value=guild.member_count, inline=True)
    embed.add_field(name="–ö–∞–Ω–∞–ª—ñ–≤", value=len(guild.channels), inline=True)
    embed.add_field(name="–†–æ–ª–µ–π", value=len(guild.roles), inline=True)
    embed.add_field(name="–°—Ç–≤–æ—Ä–µ–Ω–æ", value=guild.created_at.strftime('%d.%m.%Y %H:%M'), inline=True)
    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="roleinfo", description="–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–æ–ª—å")
@app_commands.describe(role="–†–æ–ª—å")
async def roleinfo(interaction: discord.Interaction, role: discord.Role):
    embed = discord.Embed(title=f"–†–æ–ª—å: {role.name}", color=role.color, timestamp=datetime.utcnow())
    embed.add_field(name="ID", value=role.id, inline=True)
    embed.add_field(name="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", value=len(role.members), inline=True)
    embed.add_field(name="–ö–æ–ª—ñ—Ä", value=str(role.color), inline=True)
    embed.add_field(name="–ü–æ–∑–∏—Ü—ñ—è", value=role.position, inline=True)
    embed.add_field(name="–ó–≥–∞–¥–∫–∞", value=role.mention, inline=True)
    embed.add_field(name="–°—Ç–≤–æ—Ä–µ–Ω–æ", value=role.created_at.strftime('%d.%m.%Y %H:%M'), inline=True)
    await interaction.response.send_message(embed=embed, ephemeral=True)

# ========== –ó–ê–ü–£–°–ö ==========

TOKEN = os.getenv('DISCORD_TOKEN')
if not TOKEN:
    raise ValueError("–í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–æ–∫–µ–Ω Discord")

if __name__ == '__main__':
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    bot.run(TOKEN) 
