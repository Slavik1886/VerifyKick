import discord
from discord import app_commands
from discord.ext import commands, tasks
import os
from datetime import datetime, timedelta
import asyncio
from collections import defaultdict
import json
import random
import aiohttp
from typing import Optional

intents = discord.Intents.default()
intents.members = True
intents.guilds = True
intents.message_content = True
intents.voice_states = True
intents.invites = True

bot = commands.Bot(command_prefix="!", intents=intents)

# –°–∏—Å—Ç–µ–º–∏ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
voice_time_tracker = {}
tracked_channels = {}
warning_sent = set()
voice_activity = defaultdict(timedelta)
last_activity_update = datetime.utcnow()
active_stats_tracking = {}
stronghold_stats_config = {}

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Wargaming API
WG_API_KEY = os.getenv('WG_API_KEY')  # –û—Ç—Ä–∏–º—É—î–º–æ –∑ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è Railway
WG_API_URL = "https://api.worldoftanks.eu/wot/"
CLAN_ID = os.getenv('CLAN_ID')  # –û—Ç—Ä–∏–º—É—î–º–æ –∑ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è Railway

# –°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π –∑–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è–º–∏
invite_roles = {}  # {guild_id: {invite_code: role_id}}
invite_cache = {}  # {guild_id: {invite_code: uses}}

def load_invite_data():
    try:
        with open('invite_roles.json', 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_invite_data():
    with open('invite_roles.json', 'w') as f:
        json.dump(invite_roles, f)

invite_roles = load_invite_data()

async def get_wg_api_data(endpoint: str, params: dict) -> Optional[dict]:
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ Wargaming API"""
    params['application_id'] = WG_API_KEY
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(f"{WG_API_URL}{endpoint}", params=params) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    return data.get('data') if 'data' in data else data
                print(f"–ü–æ–º–∏–ª–∫–∞ API: {resp.status} - {await resp.text()}")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ API: {e}")
    return None

async def update_invite_cache(guild):
    """–û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à –∑–∞–ø—Ä–æ—à–µ–Ω—å –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        invites = await guild.invites()
        invite_cache[guild.id] = {invite.code: invite.uses for invite in invites}
    except discord.Forbidden:
        print(f"–ù–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É –Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥ –∑–∞–ø—Ä–æ—à–µ–Ω—å –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {guild.name}")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É –∑–∞–ø—Ä–æ—à–µ–Ω—å: {e}")

async def delete_after(message, minutes):
    if minutes <= 0: return
    await asyncio.sleep(minutes * 60)
    try: await message.delete()
    except: pass

@tasks.loop(minutes=1)
async def update_voice_activity():
    global last_activity_update
    now = datetime.utcnow()
    time_elapsed = now - last_activity_update
    last_activity_update = now
    
    for guild in bot.guilds:
        for voice_channel in guild.voice_channels:
            for member in voice_channel.members:
                if not member.bot:
                    voice_activity[member.id] += time_elapsed

@tasks.loop(hours=12)
async def send_voice_activity_stats():
    for guild_id, data in active_stats_tracking.items():
        guild = bot.get_guild(guild_id)
        if not guild: continue
            
        channel = guild.get_channel(data["channel_id"])
        if not channel: continue
            
        sorted_users = sorted(voice_activity.items(), key=lambda x: x[1], reverse=True)[:data["count"]]
        if not sorted_users: continue
            
        embed = discord.Embed(
            title=f"üèÜ –¢–æ–ø-{data['count']} –∞–∫—Ç–∏–≤–Ω–∏—Ö —É –≥–æ–ª–æ—Å–æ–≤–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö",
            color=discord.Color.blurple(),
            timestamp=datetime.utcnow()
        )
        
        for i, (user_id, time_spent) in enumerate(sorted_users, 1):
            member = guild.get_member(user_id)
            if member:
                hours, remainder = divmod(time_spent.total_seconds(), 3600)
                minutes = remainder // 60
                embed.add_field(
                    name=f"{i}. {member.display_name}",
                    value=f"{int(hours)} –≥–æ–¥. {int(minutes)} —Ö–≤.",
                    inline=False
                )
        
        try: 
            await channel.send(embed=embed)
            voice_activity.clear()
        except: pass

@tasks.loop(minutes=1)
async def check_voice_activity():
    current_time = datetime.utcnow()
    for guild_id, data in tracked_channels.items():
        guild = bot.get_guild(guild_id)
        if not guild: continue
            
        voice_channel = guild.get_channel(data["voice_channel"])
        log_channel = guild.get_channel(data["log_channel"])
        if not voice_channel or not log_channel: continue
            
        for member in voice_channel.members:
            if member.bot: continue
                
            member_key = f"{guild_id}_{member.id}"
            
            if member_key not in voice_time_tracker:
                voice_time_tracker[member_key] = current_time
                warning_sent.discard(member_key)
                continue
                
            time_in_channel = current_time - voice_time_tracker[member_key]
            
            if time_in_channel > timedelta(minutes=10) and member_key not in warning_sent:
                try:
                    await member.send("‚ö†Ô∏è –í–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—ñ –≤–∂–µ 10+ —Ö–≤–∏–ª–∏–Ω. –ë—É–¥—å—Ç–µ –∞–∫—Ç–∏–≤–Ω—ñ!")
                    warning_sent.add(member_key)
                except: pass
            
            if time_in_channel > timedelta(minutes=15):
                try:
                    await member.move_to(None)
                    msg = await log_channel.send(f"üî¥ {member.mention} –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å")
                    bot.loop.create_task(delete_after(msg, data["delete_after"]))
                    del voice_time_tracker[member_key]
                    warning_sent.discard(member_key)
                except: pass

@tasks.loop(minutes=1)
async def stronghold_stats_task():
    """–§–æ–Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–∫—Ä—ñ–ø—Ä–∞–π–æ–Ω—É"""
    if not WG_API_KEY or not CLAN_ID:
        return
        
    now = datetime.utcnow()
    for guild_id, config in stronghold_stats_config.items():
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–∞—Å—Ç–∞–≤ —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
        if now.hour == config["hour"] and now.minute == config["minute"]:
            guild = bot.get_guild(guild_id)
            if not guild:
                continue
                
            channel = guild.get_channel(config["channel_id"])
            if not channel:
                continue
                
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∫–ª–∞–Ω
            clan_data = await get_wg_api_data("clans/info/", {
                'clan_id': CLAN_ID,
                'fields': "name,tag"
            })
            
            if not clan_data or str(CLAN_ID) not in clan_data:
                continue
                
            clan_info = clan_data[str(CLAN_ID)]
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–∫—Ä—ñ–ø—Ä–∞–π–æ–Ω—É
            stronghold_data = await get_wg_api_data("stronghold/clanreserves/", {
                'clan_id': CLAN_ID
            })
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—ó–≤
            battles_data = await get_wg_api_data("stronghold/clanbattles/", {
                'clan_id': CLAN_ID,
                'fields': "battles,wins,resource_absorbed"
            })
            
            if not battles_data:
                continue
                
            # –§–æ—Ä–º—É—î–º–æ embed –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
            embed = discord.Embed(
                title=f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–∫—Ä—ñ–ø—Ä–∞–π–æ–Ω—É [{clan_info['tag']}] {clan_info['name']}",
                color=discord.Color.gold(),
                timestamp=datetime.utcnow()
            )
            
            embed.add_field(
                name="–ë–æ—ó –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ",
                value=f"üîπ {battles_data.get('battles', 0)} –±–æ—ó–≤\n"
                      f"üîπ {battles_data.get('wins', 0)} –ø–µ—Ä–µ–º–æ–≥\n"
                      f"üîπ {battles_data.get('wins', 0)/battles_data.get('battles', 1)*100:.1f}% –ø–µ—Ä–µ–º–æ–≥",
                inline=False
            )
            
            embed.add_field(
                name="–ó–∞—Ä–æ–±–ª–µ–Ω–æ —Ä–µ—Å—É—Ä—Å—ñ–≤",
                value=f"ü™ô {battles_data.get('resource_absorbed', 0)} –∫—É–±—ñ–≤",
                inline=False
            )
            
            if stronghold_data and stronghold_data.get('active'):
                active_reserves = "\n".join(
                    f"üîπ {res['title']} (–¥–æ {res['end_time']})"
                    for res in stronghold_data['active']
                )
                embed.add_field(
                    name="–ê–∫—Ç–∏–≤–Ω—ñ —Ä–µ–∑–µ—Ä–≤–∏",
                    value=active_reserves,
                    inline=False
                )
            
            try:
                await channel.send(embed=embed)
            except:
                pass

@bot.event
async def on_voice_state_update(member, before, after):
    if before.channel and before.channel.id in [data["voice_channel"] for data in tracked_channels.values()]:
        member_key = f"{member.guild.id}_{member.id}"
        if member_key in voice_time_tracker:
            del voice_time_tracker[member_key]
            warning_sent.discard(member_key)

@bot.event
async def on_member_join(member):
    if member.bot:
        return
    
    guild = member.guild
    try:
        current_invites = await guild.invites()
        used_invite = None
        for invite in current_invites:
            cached_uses = invite_cache.get(guild.id, {}).get(invite.code, 0)
            if invite.uses > cached_uses:
                used_invite = invite
                break
        
        if used_invite:
            await update_invite_cache(guild)
            guild_roles = invite_roles.get(str(guild.id), {})
            role_id = guild_roles.get(used_invite.code)
            
            if role_id:
                role = guild.get_role(role_id)
                if role:
                    try:
                        await member.add_roles(role)
                        print(f"–ù–∞–¥–∞–Ω–æ —Ä–æ–ª—å {role.name} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {member} –∑–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è {used_invite.code}")
                    except discord.Forbidden:
                        print(f"–ù–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É –Ω–∞–¥–∞–≤–∞—Ç–∏ —Ä–æ–ª—å {role.name}")
                    except Exception as e:
                        print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥–∞–Ω–Ω—è —Ä–æ–ª—ñ: {e}")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞: {e}")

@bot.event
async def on_invite_create(invite):
    await update_invite_cache(invite.guild)

@bot.event
async def on_invite_delete(invite):
    await update_invite_cache(invite.guild)

@bot.event
async def on_ready():
    print(f'–ë–æ—Ç {bot.user} –æ–Ω–ª–∞–π–Ω!')
    for guild in bot.guilds:
        await update_invite_cache(guild)
    
    try:
        synced = await bot.tree.sync()
        print(f"–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: {e}")
    
    check_voice_activity.start()
    update_voice_activity.start()
    if active_stats_tracking:
        send_voice_activity_stats.start()
    if stronghold_stats_config:
        stronghold_stats_task.start()

# ========== –ö–û–ú–ê–ù–î–ò ==========

@bot.tree.command(name="assign_role_to_invite", description="–ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ —Ä–æ–ª—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è")
@app_commands.describe(
    invite="–ö–æ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è (–±–µ–∑ discord.gg/)",
    role="–†–æ–ª—å –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è"
)
async def assign_role_to_invite(interaction: discord.Interaction, invite: str, role: discord.Role):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", ephemeral=True)
    
    try:
        invites = await interaction.guild.invites()
        if not any(inv.code == invite for inv in invites):
            return await interaction.response.send_message("‚ùå –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", ephemeral=True)
        
        guild_id = str(interaction.guild.id)
        if guild_id not in invite_roles:
            invite_roles[guild_id] = {}
        
        invite_roles[guild_id][invite] = role.id
        save_invite_data()
        await update_invite_cache(interaction.guild)
        
        await interaction.response.send_message(
            f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ, —è–∫—ñ –ø—Ä–∏–π–¥—É—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è `{invite}`, –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º—É—Ç—å —Ä–æ–ª—å {role.mention}",
            ephemeral=True
        )
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}",
            ephemeral=True
        )

@bot.tree.command(name="track_voice", description="–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —É –≥–æ–ª–æ—Å–æ–≤–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö")
@app_commands.describe(
    voice_channel="–ì–æ–ª–æ—Å–æ–≤–∏–π –∫–∞–Ω–∞–ª –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è",
    log_channel="–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å",
    delete_after="–ß–µ—Ä–µ–∑ —Å–∫—ñ–ª—å–∫–∏ —Ö–≤–∏–ª–∏–Ω –≤–∏–¥–∞–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
)
async def track_voice(interaction: discord.Interaction, 
                     voice_channel: discord.VoiceChannel, 
                     log_channel: discord.TextChannel,
                     delete_after: int = 5):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤", ephemeral=True)
        return
    
    tracked_channels[interaction.guild_id] = {
        "voice_channel": voice_channel.id,
        "log_channel": log_channel.id,
        "delete_after": delete_after
    }
    
    await interaction.response.send_message(
        f"üîä –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–Ω—è {voice_channel.mention} –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ\n"
        f"üìù –õ–æ–≥—É–≤–∞–Ω–Ω—è —É {log_channel.mention}\n"
        f"‚è≥ –ê–≤—Ç–æ–≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ {delete_after} —Ö–≤",
        ephemeral=True
    )

@bot.tree.command(name="voice_stats", description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ")
@app_commands.describe(
    channel="–ö–∞–Ω–∞–ª –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
    count="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É —Ç–æ–ø—ñ",
    enable="–£–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏"
)
async def voice_stats(interaction: discord.Interaction,
                    channel: discord.TextChannel,
                    count: app_commands.Range[int, 1, 25] = 10,
                    enable: bool = True):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤", ephemeral=True)
        return
    
    if enable:
        active_stats_tracking[interaction.guild_id] = {
            "channel_id": channel.id,
            "count": count
        }
        if not send_voice_activity_stats.is_running():
            send_voice_activity_stats.start()
        await interaction.response.send_message(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤—ñ–º–∫–Ω–µ–Ω–∞ –¥–ª—è {channel.mention}",
            ephemeral=True
        )
    else:
        active_stats_tracking.pop(interaction.guild_id, None)
        await interaction.response.send_message("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–º–∫–Ω–µ–Ω–∞", ephemeral=True)

@bot.tree.command(name="remove_default_only", description="–í–∏–¥–∞–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç—ñ–ª—å–∫–∏ –∑ @everyone")
async def remove_default_only(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤", ephemeral=True)
        return
    
    await interaction.response.defer(ephemeral=True)
    deleted = 0
    
    for member in interaction.guild.members:
        if not member.bot and len(member.roles) == 1:
            try:
                await member.kick(reason="–¢—ñ–ª—å–∫–∏ @everyone")
                deleted += 1
            except: pass
    
    await interaction.followup.send(f"–í–∏–¥–∞–ª–µ–Ω–æ {deleted} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", ephemeral=True)

@bot.tree.command(name="remove_by_role", description="–í–∏–¥–∞–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ä–æ–ª–ª—é")
@app_commands.describe(role="–†–æ–ª—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
async def remove_by_role(interaction: discord.Interaction, role: discord.Role):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤", ephemeral=True)
        return
    
    if role == interaction.guild.default_role:
        await interaction.response.send_message("–ù–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª—è—Ç–∏ –≤—Å—ñ—Ö", ephemeral=True)
        return
    
    await interaction.response.defer(ephemeral=True)
    deleted = 0
    
    for member in role.members:
        if not member.bot:
            try:
                await member.kick(reason=f"–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–ª—ñ {role.name}")
                deleted += 1
            except: pass
    
    await interaction.followup.send(f"–í–∏–¥–∞–ª–µ–Ω–æ {deleted} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ä–æ–ª–ª—é {role.name}", ephemeral=True)

@bot.tree.command(name="list_no_roles", description="–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–µ–∑ —Ä–æ–ª–µ–π")
async def list_no_roles(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤", ephemeral=True)
        return
    
    await interaction.response.defer(ephemeral=True)
    members = [f"{m.display_name} ({m.id})" for m in interaction.guild.members 
               if not m.bot and len(m.roles) == 1]
    
    if not members:
        await interaction.followup.send("–ù–µ–º–∞—î —Ç–∞–∫–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", ephemeral=True)
        return
    
    chunks = [members[i:i+20] for i in range(0, len(members), 20)]
    for i, chunk in enumerate(chunks):
        msg = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –±–µ–∑ —Ä–æ–ª–µ–π (—á–∞—Å—Ç–∏–Ω–∞ {i+1}):\n" + "\n".join(chunk)
        await interaction.followup.send(msg, ephemeral=True)

@bot.tree.command(name="show_role_users", description="–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ä–æ–ª–ª—é")
@app_commands.describe(role="–†–æ–ª—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É")
async def show_role_users(interaction: discord.Interaction, role: discord.Role):
    await interaction.response.defer(ephemeral=True)
    members = [f"{m.mention} ({m.display_name})" for m in role.members if not m.bot]
    
    if not members:
        await interaction.followup.send(f"–ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ä–æ–ª–ª—é {role.name}", ephemeral=True)
        return
    
    chunks = [members[i:i+15] for i in range(0, len(members), 15)]
    for i, chunk in enumerate(chunks):
        embed = discord.Embed(
            title=f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑ —Ä–æ–ª–ª—é {role.name} ({len(members)})",
            description="\n".join(chunk),
            color=role.color
        )
        await interaction.followup.send(embed=embed, ephemeral=True)

@bot.tree.command(name="send_embed", description="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ embed-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –≤–∫–∞–∑–∞–Ω–∏–π –∫–∞–Ω–∞–ª")
@app_commands.describe(
    channel="–¢–µ–∫—Å—Ç–æ–≤–∏–π –∫–∞–Ω–∞–ª –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è",
    title="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
    description="–û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ \\n –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞)",
    color="–ö–æ–ª—ñ—Ä —Ä–∞–º–∫–∏ (–æ–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É)",
    thumbnail="–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª—É (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)",
    image="–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)"
)
@app_commands.choices(color=[
    app_commands.Choice(name="üîµ –°–∏–Ω—ñ–π", value="blue"),
    app_commands.Choice(name="üü¢ –ó–µ–ª–µ–Ω–∏–π", value="green"),
    app_commands.Choice(name="üî¥ –ß–µ—Ä–≤–æ–Ω–∏–π", value="red"),
    app_commands.Choice(name="üü° –ñ–æ–≤—Ç–∏–π", value="yellow"),
    app_commands.Choice(name="üü£ –§—ñ–æ–ª–µ—Ç–æ–≤–∏–π", value="purple"),
    app_commands.Choice(name="üü† –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π", value="orange"),
    app_commands.Choice(name="üåà –í–∏–ø–∞–¥–∫–æ–≤–∏–π", value="random")
])
async def send_embed(
    interaction: discord.Interaction,
    channel: discord.TextChannel,
    title: str,
    description: str,
    color: app_commands.Choice[str],
    thumbnail: discord.Attachment = None,
    image: discord.Attachment = None
):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º", ephemeral=True)
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–ª—ñ—Ä
    color_map = {
        "blue": discord.Color.blue(),
        "green": discord.Color.green(),
        "red": discord.Color.red(),
        "yellow": discord.Color.gold(),
        "purple": discord.Color.purple(),
        "orange": discord.Color.orange(),
        "random": discord.Color.random()
    }
    selected_color = color_map.get(color.value, discord.Color.blue())
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ embed
    embed = discord.Embed(
        title=title,
        description=description.replace('\\n', '\n'),
        color=selected_color,
        timestamp=datetime.utcnow()
    )
    
    # –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª
    if thumbnail and thumbnail.content_type.startswith('image/'):
        embed.set_thumbnail(url=thumbnail.url)
    
    # –î–æ–¥–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    if image and image.content_type.startswith('image/'):
        embed.set_image(url=image.url)
   
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ
    try:
        await channel.send(embed=embed)
        await interaction.response.send_message(
            f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–æ {channel.mention}",
            ephemeral=True
        )
    except discord.Forbidden:
        await interaction.response.send_message(
            "‚ùå –ë–æ—Ç –Ω–µ –º–∞—î –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É —Ü–µ–π –∫–∞–Ω–∞–ª",
            ephemeral=True
        )
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}",
            ephemeral=True
        )

@bot.tree.command(name="stronghold_stats", description="–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–∫—Ä—ñ–ø—Ä–∞–π–æ–Ω—É")
@app_commands.describe(
    channel="–ö–∞–Ω–∞–ª –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
    hour="–ì–æ–¥–∏–Ω–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è (0-23)",
    minute="–•–≤–∏–ª–∏–Ω–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è (0-59)",
    enable="–£–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è"
)
async def stronghold_stats(
    interaction: discord.Interaction,
    channel: discord.TextChannel,
    hour: app_commands.Range[int, 0, 23] = 18,
    minute: app_commands.Range[int, 0, 59] = 0,
    enable: bool = True
):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º", ephemeral=True)
    
    if not WG_API_KEY or not CLAN_ID:
        return await interaction.response.send_message("‚ùå –ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ API –∫–ª—é—á –∞–±–æ ID –∫–ª–∞–Ω—É", ephemeral=True)
    
    if enable:
        stronghold_stats_config[interaction.guild_id] = {
            "channel_id": channel.id,
            "hour": hour,
            "minute": minute
        }
        
        if not stronghold_stats_task.is_running():
            stronghold_stats_task.start()
            
        await interaction.response.send_message(
            f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–∫—Ä—ñ–ø—Ä–∞–π–æ–Ω—É –±—É–¥–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏—Å—å —â–æ–¥–Ω—è –æ {hour:02d}:{minute:02d} —É {channel.mention}",
            ephemeral=True
        )
    else:
        stronghold_stats_config.pop(interaction.guild_id, None)
        await interaction.response.send_message("‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∏–º–∫–Ω–µ–Ω–æ", ephemeral=True)

@bot.tree.command(name="stronghold_now", description="–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–∫—Ä—ñ–ø—Ä–∞–π–æ–Ω—É")
async def stronghold_now(interaction: discord.Interaction):
    if not WG_API_KEY or not CLAN_ID:
        return await interaction.response.send_message("‚ùå –ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ API –∫–ª—é—á –∞–±–æ ID –∫–ª–∞–Ω—É", ephemeral=True)
    
    await interaction.response.defer()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∫–ª–∞–Ω
    clan_data = await get_wg_api_data("clans/info/", {
        'clan_id': CLAN_ID,
        'fields': "name,tag"
    })
    
    if not clan_data or str(CLAN_ID) not in clan_data:
        return await interaction.followup.send("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–ª–∞–Ω—É", ephemeral=True)
    
    clan_info = clan_data[str(CLAN_ID)]
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–∫—Ä—ñ–ø—Ä–∞–π–æ–Ω—É
    stronghold_data = await get_wg_api_data("stronghold/clanreserves/", {
        'clan_id': CLAN_ID
    })
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—ó–≤
    battles_data = await get_wg_api_data("stronghold/clanbattles/", {
        'clan_id': CLAN_ID,
        'fields': "battles,wins,resource_absorbed"
    })
    
    if not battles_data:
        return await interaction.followup.send("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—ó–≤", ephemeral=True)
    
    # –§–æ—Ä–º—É—î–º–æ embed
    embed = discord.Embed(
        title=f"–ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ [{clan_info['tag']}] {clan_info['name']}",
        color=discord.Color.green(),
        timestamp=datetime.utcnow()
    )
    
    embed.add_field(
        name="–ë–æ—ó –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ",
        value=f"üîπ {battles_data.get('battles', 0)} –±–æ—ó–≤\n"
              f"üîπ {battles_data.get('wins', 0)} –ø–µ—Ä–µ–º–æ–≥\n"
              f"üîπ {battles_data.get('wins', 0)/battles_data.get('battles', 1)*100:.1f}% –ø–µ—Ä–µ–º–æ–≥",
        inline=False
    )
    
    embed.add_field(
        name="–ó–∞—Ä–æ–±–ª–µ–Ω–æ —Ä–µ—Å—É—Ä—Å—ñ–≤",
        value=f"ü™ô {battles_data.get('resource_absorbed', 0)} –∫—É–±—ñ–≤",
        inline=False
    )
    
    if stronghold_data and stronghold_data.get('active'):
        active_reserves = "\n".join(
            f"üîπ {res['title']} (–¥–æ {res['end_time']})"
            for res in stronghold_data['active']
        )
        embed.add_field(
            name="–ê–∫—Ç–∏–≤–Ω—ñ —Ä–µ–∑–µ—Ä–≤–∏",
            value=active_reserves,
            inline=False
        )
    
    await interaction.followup.send(embed=embed)

TOKEN = os.getenv('DISCORD_TOKEN')
if not TOKEN:
    raise ValueError("–í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–æ–∫–µ–Ω Discord")
bot.run(TOKEN)